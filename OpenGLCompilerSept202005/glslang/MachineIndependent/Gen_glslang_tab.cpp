
/*  A Bison parser, made from glslang.y with Bison version GNU Bison version 1.24
  */

#define YYBISON 1  /* Identify Bison output.  */

#define	ATTRIBUTE	258
#define	CONST_QUAL	259
#define	BOOL_TYPE	260
#define	FLOAT_TYPE	261
#define	INT_TYPE	262
#define	BREAK	263
#define	CONTINUE	264
#define	DO	265
#define	ELSE	266
#define	FOR	267
#define	IF	268
#define	DISCARD	269
#define	RETURN	270
#define	BVEC2	271
#define	BVEC3	272
#define	BVEC4	273
#define	IVEC2	274
#define	IVEC3	275
#define	IVEC4	276
#define	VEC2	277
#define	VEC3	278
#define	VEC4	279
#define	MATRIX2	280
#define	MATRIX3	281
#define	MATRIX4	282
#define	IN_QUAL	283
#define	OUT_QUAL	284
#define	INOUT_QUAL	285
#define	UNIFORM	286
#define	VARYING	287
#define	STRUCT	288
#define	VOID_TYPE	289
#define	WHILE	290
#define	SAMPLER1D	291
#define	SAMPLER2D	292
#define	SAMPLER3D	293
#define	SAMPLERCUBE	294
#define	SAMPLER1DSHADOW	295
#define	SAMPLER2DSHADOW	296
#define	SAMPLERRECTARB	297
#define	SAMPLERRECTSHADOWARB	298
#define	IDENTIFIER	299
#define	TYPE_NAME	300
#define	FLOATCONSTANT	301
#define	INTCONSTANT	302
#define	BOOLCONSTANT	303
#define	FIELD_SELECTION	304
#define	LEFT_OP	305
#define	RIGHT_OP	306
#define	INC_OP	307
#define	DEC_OP	308
#define	LE_OP	309
#define	GE_OP	310
#define	EQ_OP	311
#define	NE_OP	312
#define	AND_OP	313
#define	OR_OP	314
#define	XOR_OP	315
#define	MUL_ASSIGN	316
#define	DIV_ASSIGN	317
#define	ADD_ASSIGN	318
#define	MOD_ASSIGN	319
#define	LEFT_ASSIGN	320
#define	RIGHT_ASSIGN	321
#define	AND_ASSIGN	322
#define	XOR_ASSIGN	323
#define	OR_ASSIGN	324
#define	SUB_ASSIGN	325
#define	LEFT_PAREN	326
#define	RIGHT_PAREN	327
#define	LEFT_BRACKET	328
#define	RIGHT_BRACKET	329
#define	LEFT_BRACE	330
#define	RIGHT_BRACE	331
#define	DOT	332
#define	COMMA	333
#define	COLON	334
#define	EQUAL	335
#define	SEMICOLON	336
#define	BANG	337
#define	DASH	338
#define	TILDE	339
#define	PLUS	340
#define	STAR	341
#define	SLASH	342
#define	PERCENT	343
#define	LEFT_ANGLE	344
#define	RIGHT_ANGLE	345
#define	VERTICAL_BAR	346
#define	CARET	347
#define	AMPERSAND	348
#define	QUESTION	349

#line 39 "glslang.y"


/* Based on:
ANSI C Yacc grammar

In 1985, Jeff Lee published his Yacc grammar (which is accompanied by a 
matching Lex specification) for the April 30, 1985 draft version of the 
ANSI C standard.  Tom Stockfisch reposted it to net.sources in 1987; that
original, as mentioned in the answer to question 17.25 of the comp.lang.c
FAQ, can be ftp'ed from ftp.uu.net, file usenet/net.sources/ansi.c.grammar.Z.
 
I intend to keep this version as close to the current C Standard grammar as 
possible; please let me know if you discover discrepancies. 

Jutta Degener, 1995 
*/

#include "SymbolTable.h"
#include "ParseHelper.h"
#include "../Public/ShaderLang.h"

#ifdef _WIN32
    #define YYPARSE_PARAM parseContext
    #define YYPARSE_PARAM_DECL TParseContext&
    #define YY_DECL int yylex(YYSTYPE* pyylval, TParseContext& parseContext)
    #define YYLEX_PARAM parseContext
#else
    #define YYPARSE_PARAM parseContextLocal
    #define parseContext (*((TParseContext*)(parseContextLocal)))
    #define YY_DECL int yylex(YYSTYPE* pyylval, void* parseContextLocal)
    #define YYLEX_PARAM (void*)(parseContextLocal)
    extern void yyerror(char*);    
#endif

#define FRAG_VERT_ONLY(S, L) {                                                  \
    if (parseContext.language != EShLangFragment &&                             \
        parseContext.language != EShLangVertex) {                               \
        parseContext.error(L, " supported in vertex/fragment shaders only ", S, "", "");   \
        parseContext.recover();                                                            \
    }                                                                           \
}

#define VERTEX_ONLY(S, L) {                                                     \
    if (parseContext.language != EShLangVertex) {                               \
        parseContext.error(L, " supported in vertex shaders only ", S, "", "");            \
        parseContext.recover();                                                            \
    }                                                                           \
}

#define FRAG_ONLY(S, L) {                                                       \
    if (parseContext.language != EShLangFragment) {                             \
        parseContext.error(L, " supported in fragment shaders only ", S, "", "");          \
        parseContext.recover();                                                            \
    }                                                                           \
}

#define PACK_ONLY(S, L) {                                                       \
    if (parseContext.language != EShLangPack) {                                 \
        parseContext.error(L, " supported in pack shaders only ", S, "", "");              \
        parseContext.recover();                                                            \
    }                                                                           \
}

#define UNPACK_ONLY(S, L) {                                                     \
    if (parseContext.language != EShLangUnpack) {                               \
        parseContext.error(L, " supported in unpack shaders only ", S, "", "");            \
        parseContext.recover();                                                            \
    }                                                                           \
}

#define PACK_UNPACK_ONLY(S, L) {                                                \
    if (parseContext.language != EShLangUnpack &&                               \
        parseContext.language != EShLangPack) {                                 \
        parseContext.error(L, " supported in pack/unpack shaders only ", S, "", "");       \
        parseContext.recover();                                                            \
    }                                                                           \
}

#line 117 "glslang.y"
typedef union {
    struct {
        TSourceLoc line;
        union {
            TString *string;
            float f;
            int i;
            bool b;
        };
        TSymbol* symbol;
    } lex;
    struct {
        TSourceLoc line;
        TOperator op;
        union {
            TIntermNode* intermNode;
            TIntermNodePair nodePair;
            TIntermTyped* intermTypedNode;
            TIntermAggregate* intermAggregate;
        };
        union {
            TPublicType type;
            TQualifier qualifier;
            TFunction* function;
            TParameter param;
            TTypeLine typeLine;
            TTypeList* typeList;
        };
    } interm;
} YYSTYPE;
#line 148 "glslang.y"

#ifndef _WIN32
    extern int yylex(YYSTYPE*, void*);
#endif

#ifndef YYLTYPE
typedef
  struct yyltype
    {
      int timestamp;
      int first_line;
      int first_column;
      int last_line;
      int last_column;
      char *text;
   }
  yyltype;

#define YYLTYPE yyltype
#endif

#ifndef YYDEBUG
#define YYDEBUG 1
#endif

#include <stdio.h>

#ifndef __cplusplus
#ifndef __STDC__
#define const
#endif
#endif



#define	YYFINAL		315
#define	YYFLAG		-32768
#define	YYNTBASE	95

#define YYTRANSLATE(x) ((unsigned)(x) <= 349 ? yytranslate[x] : 170)

static const char yytranslate[] = {     0,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
     2,     2,     2,     2,     2,     1,     2,     3,     4,     5,
     6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
    16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
    26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
    36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
    46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
    56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,    71,    72,    73,    74,    75,
    76,    77,    78,    79,    80,    81,    82,    83,    84,    85,
    86,    87,    88,    89,    90,    91,    92,    93,    94
};

#if YYDEBUG != 0
static const short yyprhs[] = {     0,
     0,     2,     4,     6,     8,    10,    14,    16,    21,    23,
    27,    30,    33,    35,    37,    39,    43,    46,    49,    52,
    54,    57,    61,    64,    66,    68,    70,    72,    75,    78,
    81,    83,    85,    87,    89,    91,    95,    99,   103,   105,
   109,   113,   115,   119,   123,   125,   129,   133,   137,   141,
   143,   147,   151,   153,   157,   159,   163,   165,   169,   171,
   175,   177,   181,   183,   187,   189,   195,   197,   201,   203,
   205,   207,   209,   211,   213,   215,   217,   219,   221,   223,
   225,   229,   231,   234,   237,   240,   242,   244,   247,   251,
   255,   258,   264,   268,   271,   275,   278,   279,   281,   283,
   285,   287,   289,   293,   299,   306,   314,   323,   329,   331,
   334,   339,   345,   352,   360,   365,   367,   370,   372,   374,
   376,   378,   380,   385,   387,   389,   391,   393,   395,   397,
   399,   401,   403,   405,   407,   409,   411,   413,   415,   417,
   419,   421,   423,   425,   427,   429,   431,   433,   435,   437,
   443,   448,   450,   453,   457,   459,   463,   465,   470,   472,
   474,   476,   478,   480,   482,   484,   486,   488,   491,   492,
   493,   499,   501,   503,   506,   510,   512,   515,   517,   520,
   526,   530,   532,   534,   539,   540,   547,   548,   557,   558,
   566,   568,   570,   572,   573,   576,   580,   583,   586,   589,
   593,   596,   598,   601,   603,   605,   606
};

static const short yyrhs[] = {    44,
     0,    95,     0,    47,     0,    46,     0,    48,     0,    71,
   122,    72,     0,    96,     0,    97,    73,    98,    74,     0,
    99,     0,    97,    77,    49,     0,    97,    52,     0,    97,
    53,     0,   122,     0,   100,     0,   101,     0,    97,    77,
   101,     0,   103,    72,     0,   102,    72,     0,   104,    34,
     0,   104,     0,   104,   120,     0,   103,    78,   120,     0,
   105,    71,     0,   137,     0,    44,     0,    49,     0,    97,
     0,    52,   106,     0,    53,   106,     0,   107,   106,     0,
    85,     0,    83,     0,    82,     0,    84,     0,   106,     0,
   108,    86,   106,     0,   108,    87,   106,     0,   108,    88,
   106,     0,   108,     0,   109,    85,   108,     0,   109,    83,
   108,     0,   109,     0,   110,    50,   109,     0,   110,    51,
   109,     0,   110,     0,   111,    89,   110,     0,   111,    90,
   110,     0,   111,    54,   110,     0,   111,    55,   110,     0,
   111,     0,   112,    56,   111,     0,   112,    57,   111,     0,
   112,     0,   113,    93,   112,     0,   113,     0,   114,    92,
   113,     0,   114,     0,   115,    91,   114,     0,   115,     0,
   116,    58,   115,     0,   116,     0,   117,    60,   116,     0,
   117,     0,   118,    59,   117,     0,   118,     0,   118,    94,
   122,    79,   120,     0,   119,     0,   106,   121,   120,     0,
    80,     0,    61,     0,    62,     0,    64,     0,    63,     0,
    70,     0,    65,     0,    66,     0,    67,     0,    68,     0,
    69,     0,   120,     0,   122,    78,   120,     0,   119,     0,
   125,    81,     0,   133,    81,     0,   126,    72,     0,   128,
     0,   127,     0,   128,   130,     0,   127,    78,   130,     0,
   135,    44,    71,     0,   137,    44,     0,   137,    44,    73,
   123,    74,     0,   136,   131,   129,     0,   131,   129,     0,
   136,   131,   132,     0,   131,   132,     0,     0,    28,     0,
    29,     0,    30,     0,   137,     0,   134,     0,   133,    78,
    44,     0,   133,    78,    44,    73,    74,     0,   133,    78,
    44,    73,   123,    74,     0,   133,    78,    44,    73,    74,
    80,   144,     0,   133,    78,    44,    73,   123,    74,    80,
   144,     0,   133,    78,    44,    80,   144,     0,   135,     0,
   135,    44,     0,   135,    44,    73,    74,     0,   135,    44,
    73,   123,    74,     0,   135,    44,    73,    74,    80,   144,
     0,   135,    44,    73,   123,    74,    80,   144,     0,   135,
    44,    80,   144,     0,   137,     0,   136,   137,     0,     4,
     0,     3,     0,    32,     0,    31,     0,   138,     0,   138,
    73,   123,    74,     0,    34,     0,     6,     0,     7,     0,
     5,     0,    22,     0,    23,     0,    24,     0,    16,     0,
    17,     0,    18,     0,    19,     0,    20,     0,    21,     0,
    25,     0,    26,     0,    27,     0,    36,     0,    37,     0,
    38,     0,    39,     0,    40,     0,    41,     0,    42,     0,
    43,     0,   139,     0,    45,     0,    33,    44,    75,   140,
    76,     0,    33,    75,   140,    76,     0,   141,     0,   140,
   141,     0,   137,   142,    81,     0,   143,     0,   142,    78,
   143,     0,    44,     0,    44,    73,   123,    74,     0,   120,
     0,   124,     0,   148,     0,   147,     0,   145,     0,   154,
     0,   155,     0,   158,     0,   165,     0,    75,    76,     0,
     0,     0,    75,   149,   153,   150,    76,     0,   152,     0,
   147,     0,    75,    76,     0,    75,   153,    76,     0,   146,
     0,   153,   146,     0,    81,     0,   122,    81,     0,    13,
    71,   122,    72,   156,     0,   146,    11,   146,     0,   146,
     0,   122,     0,   135,    44,    80,   144,     0,     0,    35,
    71,   159,   157,    72,   151,     0,     0,    10,   160,   146,
    35,    71,   122,    72,    81,     0,     0,    12,    71,   161,
   162,   164,    72,   151,     0,   154,     0,   145,     0,   157,
     0,     0,   163,    81,     0,   163,    81,   122,     0,     9,
    81,     0,     8,    81,     0,    15,    81,     0,    15,   122,
    81,     0,    14,    81,     0,   167,     0,   166,   167,     0,
   168,     0,   124,     0,     0,   125,   169,   152,     0
};

#endif

#if YYDEBUG != 0
static const short yyrline[] = { 0,
   214,   249,   252,   265,   270,   275,   281,   284,   357,   360,
   469,   479,   492,   500,   606,   609,   631,   635,   642,   646,
   653,   659,   668,   676,   740,   747,   757,   760,   770,   780,
   802,   803,   804,   805,   811,   812,   821,   830,   842,   843,
   851,   862,   863,   872,   884,   885,   895,   905,   915,   928,
   929,   940,   954,   955,   967,   968,   980,   981,   993,   994,
  1007,  1008,  1021,  1022,  1035,  1036,  1053,  1054,  1068,  1069,
  1070,  1071,  1072,  1073,  1074,  1075,  1076,  1077,  1078,  1082,
  1085,  1096,  1104,  1105,  1113,  1149,  1152,  1159,  1167,  1188,
  1207,  1218,  1247,  1252,  1262,  1267,  1277,  1280,  1283,  1286,
  1292,  1299,  1302,  1313,  1331,  1352,  1385,  1421,  1444,  1448,
  1461,  1480,  1503,  1538,  1577,  1668,  1678,  1704,  1707,  1713,
  1721,  1729,  1732,  1747,  1751,  1755,  1759,  1768,  1773,  1778,
  1783,  1788,  1793,  1798,  1803,  1808,  1813,  1819,  1825,  1831,
  1836,  1841,  1846,  1851,  1856,  1861,  1871,  1881,  1886,  1899,
  1909,  1917,  1920,  1935,  1961,  1965,  1971,  1976,  1989,  1993,
  1997,  1998,  2004,  2005,  2006,  2007,  2008,  2012,  2013,  2013,
  2013,  2021,  2022,  2027,  2030,  2038,  2041,  2047,  2048,  2052,
  2060,  2064,  2074,  2079,  2096,  2096,  2101,  2101,  2108,  2108,
  2121,  2124,  2130,  2133,  2139,  2143,  2150,  2157,  2164,  2171,
  2182,  2191,  2195,  2202,  2205,  2211,  2296
};

static const char * const yytname[] = {   "$","error","$undefined.","ATTRIBUTE",
"CONST_QUAL","BOOL_TYPE","FLOAT_TYPE","INT_TYPE","BREAK","CONTINUE","DO","ELSE",
"FOR","IF","DISCARD","RETURN","BVEC2","BVEC3","BVEC4","IVEC2","IVEC3","IVEC4",
"VEC2","VEC3","VEC4","MATRIX2","MATRIX3","MATRIX4","IN_QUAL","OUT_QUAL","INOUT_QUAL",
"UNIFORM","VARYING","STRUCT","VOID_TYPE","WHILE","SAMPLER1D","SAMPLER2D","SAMPLER3D",
"SAMPLERCUBE","SAMPLER1DSHADOW","SAMPLER2DSHADOW","SAMPLERRECTARB","SAMPLERRECTSHADOWARB",
"IDENTIFIER","TYPE_NAME","FLOATCONSTANT","INTCONSTANT","BOOLCONSTANT","FIELD_SELECTION",
"LEFT_OP","RIGHT_OP","INC_OP","DEC_OP","LE_OP","GE_OP","EQ_OP","NE_OP","AND_OP",
"OR_OP","XOR_OP","MUL_ASSIGN","DIV_ASSIGN","ADD_ASSIGN","MOD_ASSIGN","LEFT_ASSIGN",
"RIGHT_ASSIGN","AND_ASSIGN","XOR_ASSIGN","OR_ASSIGN","SUB_ASSIGN","LEFT_PAREN",
"RIGHT_PAREN","LEFT_BRACKET","RIGHT_BRACKET","LEFT_BRACE","RIGHT_BRACE","DOT",
"COMMA","COLON","EQUAL","SEMICOLON","BANG","DASH","TILDE","PLUS","STAR","SLASH",
"PERCENT","LEFT_ANGLE","RIGHT_ANGLE","VERTICAL_BAR","CARET","AMPERSAND","QUESTION",
"variable_identifier","primary_expression","postfix_expression","integer_expression",
"function_call","function_call_or_method","function_call_generic","function_call_header_no_parameters",
"function_call_header_with_parameters","function_call_header","function_identifier",
"unary_expression","unary_operator","multiplicative_expression","additive_expression",
"shift_expression","relational_expression","equality_expression","and_expression",
"exclusive_or_expression","inclusive_or_expression","logical_and_expression",
"logical_xor_expression","logical_or_expression","conditional_expression","assignment_expression",
"assignment_operator","expression","constant_expression","declaration","function_prototype",
"function_declarator","function_header_with_parameters","function_header","parameter_declarator",
"parameter_declaration","parameter_qualifier","parameter_type_specifier","init_declarator_list",
"single_declaration","fully_specified_type","type_qualifier","type_specifier",
"type_specifier_nonarray","struct_specifier","struct_declaration_list","struct_declaration",
"struct_declarator_list","struct_declarator","initializer","declaration_statement",
"statement","simple_statement","compound_statement","@1","@2","statement_no_new_scope",
"compound_statement_no_new_scope","statement_list","expression_statement","selection_statement",
"selection_rest_statement","condition","iteration_statement","@3","@4","@5",
"for_init_statement","conditionopt","for_rest_statement","jump_statement","translation_unit",
"external_declaration","function_definition","@6",""
};
#endif

static const short yyr1[] = {     0,
    95,    96,    96,    96,    96,    96,    97,    97,    97,    97,
    97,    97,    98,    99,   100,   100,   101,   101,   102,   102,
   103,   103,   104,   105,   105,   105,   106,   106,   106,   106,
   107,   107,   107,   107,   108,   108,   108,   108,   109,   109,
   109,   110,   110,   110,   111,   111,   111,   111,   111,   112,
   112,   112,   113,   113,   114,   114,   115,   115,   116,   116,
   117,   117,   118,   118,   119,   119,   120,   120,   121,   121,
   121,   121,   121,   121,   121,   121,   121,   121,   121,   122,
   122,   123,   124,   124,   125,   126,   126,   127,   127,   128,
   129,   129,   130,   130,   130,   130,   131,   131,   131,   131,
   132,   133,   133,   133,   133,   133,   133,   133,   134,   134,
   134,   134,   134,   134,   134,   135,   135,   136,   136,   136,
   136,   137,   137,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   139,
   139,   140,   140,   141,   142,   142,   143,   143,   144,   145,
   146,   146,   147,   147,   147,   147,   147,   148,   149,   150,
   148,   151,   151,   152,   152,   153,   153,   154,   154,   155,
   156,   156,   157,   157,   159,   158,   160,   158,   161,   158,
   162,   162,   163,   163,   164,   164,   165,   165,   165,   165,
   165,   166,   166,   167,   167,   169,   168
};

static const short yyr2[] = {     0,
     1,     1,     1,     1,     1,     3,     1,     4,     1,     3,
     2,     2,     1,     1,     1,     3,     2,     2,     2,     1,
     2,     3,     2,     1,     1,     1,     1,     2,     2,     2,
     1,     1,     1,     1,     1,     3,     3,     3,     1,     3,
     3,     1,     3,     3,     1,     3,     3,     3,     3,     1,
     3,     3,     1,     3,     1,     3,     1,     3,     1,     3,
     1,     3,     1,     3,     1,     5,     1,     3,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     3,     1,     2,     2,     2,     1,     1,     2,     3,     3,
     2,     5,     3,     2,     3,     2,     0,     1,     1,     1,
     1,     1,     3,     5,     6,     7,     8,     5,     1,     2,
     4,     5,     6,     7,     4,     1,     2,     1,     1,     1,
     1,     1,     4,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     1,     1,     5,
     4,     1,     2,     3,     1,     3,     1,     4,     1,     1,
     1,     1,     1,     1,     1,     1,     1,     2,     0,     0,
     5,     1,     1,     2,     3,     1,     2,     1,     2,     5,
     3,     1,     1,     4,     0,     6,     0,     8,     0,     7,
     1,     1,     1,     0,     2,     3,     2,     2,     2,     3,
     2,     1,     2,     1,     1,     0,     3
};

static const short yydefact[] = {     0,
   119,   118,   127,   125,   126,   131,   132,   133,   134,   135,
   136,   128,   129,   130,   137,   138,   139,   121,   120,     0,
   124,   140,   141,   142,   143,   144,   145,   146,   147,   149,
   205,   206,     0,    87,    97,     0,   102,   109,     0,   116,
   122,   148,     0,   202,   204,     0,     0,    83,     0,    85,
    97,    98,    99,   100,    88,     0,    97,     0,    84,   110,
   117,     0,   203,     0,     0,     0,   152,     0,   207,    89,
    94,    96,   101,     0,   103,    90,     0,     0,     1,     4,
     3,     5,    26,     0,     0,     0,    33,    32,    34,    31,
     2,     7,    27,     9,    14,    15,     0,     0,    20,     0,
    35,     0,    39,    42,    45,    50,    53,    55,    57,    59,
    61,    63,    65,    82,     0,    24,     0,   157,     0,   155,
   151,   153,     0,     0,   187,     0,     0,     0,     0,     0,
   169,   174,   178,    35,    67,    80,     0,   160,     0,   116,
   163,   176,   162,   161,     0,   164,   165,   166,   167,    91,
    93,    95,     0,     0,   111,     0,   159,   115,    28,    29,
     0,    11,    12,     0,     0,    18,    17,     0,   124,    21,
    23,    30,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,   123,   150,     0,     0,   154,   198,   197,     0,
   189,     0,   201,   199,     0,   185,   168,     0,    70,    71,
    73,    72,    75,    76,    77,    78,    79,    74,    69,     0,
     0,   179,   175,   177,     0,   104,     0,   108,     0,   112,
     6,     0,    13,    25,    10,    16,    22,    36,    37,    38,
    41,    40,    43,    44,    48,    49,    46,    47,    51,    52,
    54,    56,    58,    60,    62,    64,     0,     0,   156,     0,
     0,     0,   200,     0,   170,    68,    81,     0,     0,   105,
   113,     0,     8,     0,   158,     0,   192,   191,   194,     0,
   183,     0,     0,     0,    92,   106,     0,   114,    66,     0,
   193,     0,     0,   182,   180,     0,     0,   171,   107,     0,
   195,     0,     0,     0,   173,   186,   172,     0,   196,   190,
   181,   184,   188,     0,     0
};

static const short yydefgoto[] = {    91,
    92,    93,   232,    94,    95,    96,    97,    98,    99,   100,
   134,   102,   103,   104,   105,   106,   107,   108,   109,   110,
   111,   112,   113,   135,   136,   220,   137,   115,   138,   139,
    33,    34,    35,    71,    55,    56,    72,    36,    37,    38,
    39,   116,    41,    42,    66,    67,   119,   120,   158,   141,
   142,   143,   144,   208,   284,   306,   307,   145,   146,   147,
   295,   283,   148,   264,   200,   261,   279,   292,   293,   149,
    43,    44,    45,    49
};

static const short yypact[] = {  1247,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   -34,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   -73,   -28,    18,    22,   -41,-32768,    72,  1288,-32768,
   -57,-32768,  1159,-32768,-32768,    43,  1288,-32768,    78,-32768,
    54,-32768,-32768,-32768,-32768,  1288,    42,   110,-32768,    -4,
-32768,   973,-32768,  1288,   123,   214,-32768,   301,-32768,-32768,
-32768,-32768,   124,  1288,   -44,-32768,   763,   973,    99,-32768,
-32768,-32768,-32768,   973,   973,   973,-32768,-32768,-32768,-32768,
-32768,-32768,   -39,-32768,-32768,-32768,   101,   -61,  1043,   103,
-32768,   973,    25,    -5,    10,   -27,    32,    83,    85,    88,
   122,   125,   -52,-32768,   108,-32768,  1113,   111,    12,-32768,
-32768,-32768,   105,   106,-32768,   117,   118,   109,   833,   120,
   126,-32768,-32768,    95,-32768,-32768,    17,-32768,   -73,   127,
-32768,-32768,-32768,-32768,   384,-32768,-32768,-32768,-32768,   121,
-32768,-32768,   903,   973,   113,   129,-32768,-32768,-32768,-32768,
   -60,-32768,-32768,   973,  1200,-32768,-32768,   973,   132,-32768,
-32768,-32768,   973,   973,   973,   973,   973,   973,   973,   973,
   973,   973,   973,   973,   973,   973,   973,   973,   973,   973,
   973,   973,-32768,-32768,   973,   123,-32768,-32768,-32768,   467,
-32768,   973,-32768,-32768,    29,-32768,-32768,   467,-32768,-32768,
-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   973,
   973,-32768,-32768,-32768,   973,   119,   131,-32768,   973,   133,
-32768,   135,   128,-32768,   130,-32768,-32768,-32768,-32768,-32768,
    25,    25,    -5,    -5,    10,    10,    10,    10,   -27,   -27,
    32,    83,    85,    88,   122,   125,    27,   137,-32768,   177,
   623,   -13,-32768,   693,   467,-32768,-32768,   140,   973,   136,
-32768,   973,-32768,   973,-32768,   144,-32768,-32768,   693,   467,
   128,   173,   150,   147,-32768,-32768,   973,-32768,-32768,   973,
-32768,   143,   153,   215,-32768,   148,   550,-32768,-32768,     1,
   973,   550,   467,   973,-32768,-32768,-32768,   161,   128,-32768,
-32768,-32768,-32768,   229,-32768
};

static const short yypgoto[] = {-32768,
-32768,-32768,-32768,-32768,-32768,    79,-32768,-32768,-32768,-32768,
   -53,-32768,   -30,   -64,   -79,   -35,    57,    58,    61,    69,
    56,    71,-32768,   -56,   -77,-32768,   -83,   -54,     2,     5,
-32768,-32768,-32768,   186,   212,   209,   193,-32768,-32768,  -249,
   -16,     0,-32768,-32768,   204,   -62,-32768,    73,  -121,     9,
  -125,  -210,-32768,-32768,-32768,   -31,   223,    65,    13,-32768,
-32768,    -3,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
-32768,   232,-32768,-32768
};


#define	YYLAST		1333


static const short yytable[] = {    40,
   157,    31,   161,   122,    32,   114,   191,    48,   101,    46,
   167,   231,   162,   163,   282,    62,   168,   221,    57,   224,
   114,   170,   156,   101,     1,     2,   180,   181,   153,   282,
   159,   160,   228,   164,    57,   154,    58,   165,    61,    59,
    47,   192,    40,    50,    31,   205,    65,    32,   172,    52,
    53,    54,    18,    19,   122,    73,     1,     2,   280,   178,
   179,   182,   183,    65,   221,    65,    76,   140,    77,    52,
    53,    54,   308,    73,   260,    78,   157,   176,   221,   177,
   233,    52,    53,    54,    18,    19,   305,   184,   185,   196,
   237,   305,   197,   -86,   221,    51,   114,   222,   227,   101,
   245,   246,   247,   248,   221,   274,   221,   271,   257,   263,
   173,   174,   175,   243,   244,    60,    65,    64,   262,   238,
   239,   240,   101,   101,   101,   101,   101,   101,   101,   101,
   101,   101,   101,   101,   101,   101,   101,   101,   114,   224,
   258,   101,   266,   267,   140,   241,   242,   286,   249,   250,
   288,   157,    68,    75,   294,   209,   210,   211,   212,   213,
   214,   215,   216,   217,   218,   299,   118,   150,   114,   -25,
   268,   101,   166,   171,   219,   186,   187,   311,   188,   189,
   281,   193,   312,   195,   190,   198,   199,   201,   202,   203,
   206,   157,   229,   225,   157,   281,   289,   -24,   269,   140,
   -26,   207,   230,   -19,   270,   221,   300,   140,   273,   157,
   275,   276,   272,   285,   290,   287,   296,   309,     3,     4,
     5,   297,   298,   301,   302,   303,   157,   304,   315,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,   313,   251,   236,   252,   255,    20,    21,   253,    22,
    23,    24,    25,    26,    27,    28,    29,   254,    30,   151,
   140,   256,    70,   140,   140,    74,   152,   117,   259,   277,
   310,    69,   265,   278,    63,   291,     0,     0,   140,   140,
     0,     0,     0,     0,     0,     0,     0,     0,     0,   121,
     0,     0,     0,     0,     0,     0,   140,     0,     0,     0,
     0,   140,   140,     1,     2,     3,     4,     5,   123,   124,
   125,     0,   126,   127,   128,   129,     6,     7,     8,     9,
    10,    11,    12,    13,    14,    15,    16,    17,     0,     0,
     0,    18,    19,    20,    21,   130,    22,    23,    24,    25,
    26,    27,    28,    29,    79,    30,    80,    81,    82,    83,
     0,     0,    84,    85,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,    86,     0,     0,     0,   131,   132,     0,     0,     0,
     0,   133,    87,    88,    89,    90,     1,     2,     3,     4,
     5,   123,   124,   125,     0,   126,   127,   128,   129,     6,
     7,     8,     9,    10,    11,    12,    13,    14,    15,    16,
    17,     0,     0,     0,    18,    19,    20,    21,   130,    22,
    23,    24,    25,    26,    27,    28,    29,    79,    30,    80,
    81,    82,    83,     0,     0,    84,    85,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,    86,     0,     0,     0,   131,   223,
     0,     0,     0,     0,   133,    87,    88,    89,    90,     1,
     2,     3,     4,     5,   123,   124,   125,     0,   126,   127,
   128,   129,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,     0,     0,     0,    18,    19,    20,
    21,   130,    22,    23,    24,    25,    26,    27,    28,    29,
    79,    30,    80,    81,    82,    83,     0,     0,    84,    85,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,    86,     0,     0,
     0,   131,     0,     0,     0,     0,     0,   133,    87,    88,
    89,    90,     1,     2,     3,     4,     5,   123,   124,   125,
     0,   126,   127,   128,   129,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,     0,     0,     0,
    18,    19,    20,    21,   130,    22,    23,    24,    25,    26,
    27,    28,    29,    79,    30,    80,    81,    82,    83,     0,
     0,    84,    85,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    86,     0,     0,     0,    68,     1,     2,     3,     4,     5,
   133,    87,    88,    89,    90,     0,     0,     0,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
     0,     0,     0,    18,    19,    20,    21,     0,    22,    23,
    24,    25,    26,    27,    28,    29,    79,    30,    80,    81,
    82,    83,     0,     0,    84,    85,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    86,     0,     1,     2,     3,     4,     5,
     0,     0,     0,   133,    87,    88,    89,    90,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
     0,     0,     0,    18,    19,    20,    21,     0,    22,    23,
    24,    25,    26,    27,    28,    29,    79,    30,    80,    81,
    82,    83,     0,     0,    84,    85,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    86,     0,     0,     0,     3,     4,     5,
     0,     0,     0,     0,    87,    88,    89,    90,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
     0,     0,     0,     0,     0,    20,    21,     0,    22,    23,
    24,    25,    26,    27,    28,    29,    79,    30,    80,    81,
    82,    83,     0,     0,    84,    85,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    86,     0,     0,   155,     3,     4,     5,
     0,     0,     0,     0,    87,    88,    89,    90,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
     0,     0,     0,     0,     0,    20,    21,     0,    22,    23,
    24,    25,    26,    27,    28,    29,    79,    30,    80,    81,
    82,    83,     0,     0,    84,    85,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    86,     0,     0,     0,     3,     4,     5,
     0,     0,     0,   204,    87,    88,    89,    90,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
     0,     0,     0,     0,     0,    20,    21,     0,    22,    23,
    24,    25,    26,    27,    28,    29,    79,    30,    80,    81,
    82,    83,     0,     0,    84,    85,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    86,     0,     0,   226,     3,     4,     5,
     0,     0,     0,     0,    87,    88,    89,    90,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
     0,     0,     0,     0,     0,    20,    21,     0,    22,    23,
    24,    25,    26,    27,    28,    29,    79,    30,    80,    81,
    82,    83,     0,     0,    84,    85,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    86,     0,     0,     0,     3,     4,     5,
     0,     0,     0,     0,    87,    88,    89,    90,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
     0,     0,     0,     0,     0,    20,   169,     0,    22,    23,
    24,    25,    26,    27,    28,    29,    79,    30,    80,    81,
    82,    83,     0,     0,    84,    85,     0,     0,     0,     0,
     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0,    86,     0,     0,     0,     3,     4,     5,
     0,     0,     0,     0,    87,    88,    89,    90,     6,     7,
     8,     9,    10,    11,    12,    13,    14,    15,    16,    17,
     0,     0,     0,     0,     0,    20,    21,     0,    22,    23,
    24,    25,    26,    27,    28,    29,     0,    30,   314,     0,
     0,     1,     2,     3,     4,     5,     0,     0,     0,     0,
     0,     0,     0,     0,     6,     7,     8,     9,    10,    11,
    12,    13,    14,    15,    16,    17,     0,     0,   194,    18,
    19,    20,    21,     0,    22,    23,    24,    25,    26,    27,
    28,    29,     0,    30,     3,     4,     5,     0,     0,     0,
     0,     0,     0,     0,     0,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,     0,     0,     0,
     0,     0,    20,    21,     0,    22,    23,    24,    25,    26,
    27,    28,    29,   234,    30,     0,     0,     0,   235,     1,
     2,     3,     4,     5,     0,     0,     0,     0,     0,     0,
     0,     0,     6,     7,     8,     9,    10,    11,    12,    13,
    14,    15,    16,    17,     0,     0,     0,    18,    19,    20,
    21,     0,    22,    23,    24,    25,    26,    27,    28,    29,
     0,    30,     3,     4,     5,     0,     0,     0,     0,     0,
     0,     0,     0,     6,     7,     8,     9,    10,    11,    12,
    13,    14,    15,    16,    17,     0,     0,     0,     0,     0,
    20,    21,     0,    22,    23,    24,    25,    26,    27,    28,
    29,     0,    30
};

static const short yycheck[] = {     0,
    78,     0,    86,    66,     0,    62,    59,    81,    62,    44,
    72,    72,    52,    53,   264,    73,    78,    78,    35,   145,
    77,    99,    77,    77,     3,     4,    54,    55,    73,   279,
    84,    85,   154,    73,    51,    80,    78,    77,    39,    81,
    75,    94,    43,    72,    43,   129,    47,    43,   102,    28,
    29,    30,    31,    32,   117,    56,     3,     4,    72,    50,
    51,    89,    90,    64,    78,    66,    71,    68,    73,    28,
    29,    30,    72,    74,   200,    80,   154,    83,    78,    85,
   164,    28,    29,    30,    31,    32,   297,    56,    57,    78,
   168,   302,    81,    72,    78,    78,   153,    81,   153,   153,
   180,   181,   182,   183,    78,    79,    78,   229,   192,    81,
    86,    87,    88,   178,   179,    44,   117,    75,   202,   173,
   174,   175,   176,   177,   178,   179,   180,   181,   182,   183,
   184,   185,   186,   187,   188,   189,   190,   191,   195,   265,
   195,   195,   220,   221,   145,   176,   177,   269,   184,   185,
   272,   229,    75,    44,   280,    61,    62,    63,    64,    65,
    66,    67,    68,    69,    70,   287,    44,    44,   225,    71,
   225,   225,    72,    71,    80,    93,    92,   303,    91,    58,
   264,    74,   304,    73,    60,    81,    81,    71,    71,    81,
    71,   269,    80,    73,   272,   279,   274,    71,    80,   200,
    71,    76,    74,    72,    74,    78,   290,   208,    74,   287,
    74,    35,    80,    74,    71,    80,    44,   301,     5,     6,
     7,    72,    76,    81,    72,    11,   304,    80,     0,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    81,   186,   165,   187,   190,    33,    34,   188,    36,
    37,    38,    39,    40,    41,    42,    43,   189,    45,    74,
   261,   191,    51,   264,   265,    57,    74,    64,   196,   261,
   302,    49,   208,   261,    43,   279,    -1,    -1,   279,   280,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    76,
    -1,    -1,    -1,    -1,    -1,    -1,   297,    -1,    -1,    -1,
    -1,   302,   303,     3,     4,     5,     6,     7,     8,     9,
    10,    -1,    12,    13,    14,    15,    16,    17,    18,    19,
    20,    21,    22,    23,    24,    25,    26,    27,    -1,    -1,
    -1,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
    -1,    -1,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    71,    -1,    -1,    -1,    75,    76,    -1,    -1,    -1,
    -1,    81,    82,    83,    84,    85,     3,     4,     5,     6,
     7,     8,     9,    10,    -1,    12,    13,    14,    15,    16,
    17,    18,    19,    20,    21,    22,    23,    24,    25,    26,
    27,    -1,    -1,    -1,    31,    32,    33,    34,    35,    36,
    37,    38,    39,    40,    41,    42,    43,    44,    45,    46,
    47,    48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    71,    -1,    -1,    -1,    75,    76,
    -1,    -1,    -1,    -1,    81,    82,    83,    84,    85,     3,
     4,     5,     6,     7,     8,     9,    10,    -1,    12,    13,
    14,    15,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    -1,    -1,    -1,    31,    32,    33,
    34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
    44,    45,    46,    47,    48,    49,    -1,    -1,    52,    53,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    71,    -1,    -1,
    -1,    75,    -1,    -1,    -1,    -1,    -1,    81,    82,    83,
    84,    85,     3,     4,     5,     6,     7,     8,     9,    10,
    -1,    12,    13,    14,    15,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    -1,    -1,    -1,
    31,    32,    33,    34,    35,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    46,    47,    48,    49,    -1,
    -1,    52,    53,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    71,    -1,    -1,    -1,    75,     3,     4,     5,     6,     7,
    81,    82,    83,    84,    85,    -1,    -1,    -1,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    -1,    -1,    -1,    31,    32,    33,    34,    -1,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    -1,     3,     4,     5,     6,     7,
    -1,    -1,    -1,    81,    82,    83,    84,    85,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    -1,    -1,    -1,    31,    32,    33,    34,    -1,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    -1,    -1,    -1,     5,     6,     7,
    -1,    -1,    -1,    -1,    82,    83,    84,    85,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    -1,    -1,    -1,    -1,    -1,    33,    34,    -1,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    -1,    -1,    74,     5,     6,     7,
    -1,    -1,    -1,    -1,    82,    83,    84,    85,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    -1,    -1,    -1,    -1,    -1,    33,    34,    -1,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    -1,    -1,    -1,     5,     6,     7,
    -1,    -1,    -1,    81,    82,    83,    84,    85,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    -1,    -1,    -1,    -1,    -1,    33,    34,    -1,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    -1,    -1,    74,     5,     6,     7,
    -1,    -1,    -1,    -1,    82,    83,    84,    85,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    -1,    -1,    -1,    -1,    -1,    33,    34,    -1,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    -1,    -1,    -1,     5,     6,     7,
    -1,    -1,    -1,    -1,    82,    83,    84,    85,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    -1,    -1,    -1,    -1,    -1,    33,    34,    -1,    36,    37,
    38,    39,    40,    41,    42,    43,    44,    45,    46,    47,
    48,    49,    -1,    -1,    52,    53,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    71,    -1,    -1,    -1,     5,     6,     7,
    -1,    -1,    -1,    -1,    82,    83,    84,    85,    16,    17,
    18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
    -1,    -1,    -1,    -1,    -1,    33,    34,    -1,    36,    37,
    38,    39,    40,    41,    42,    43,    -1,    45,     0,    -1,
    -1,     3,     4,     5,     6,     7,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,
    22,    23,    24,    25,    26,    27,    -1,    -1,    76,    31,
    32,    33,    34,    -1,    36,    37,    38,    39,    40,    41,
    42,    43,    -1,    45,     5,     6,     7,    -1,    -1,    -1,
    -1,    -1,    -1,    -1,    -1,    16,    17,    18,    19,    20,
    21,    22,    23,    24,    25,    26,    27,    -1,    -1,    -1,
    -1,    -1,    33,    34,    -1,    36,    37,    38,    39,    40,
    41,    42,    43,    44,    45,    -1,    -1,    -1,    49,     3,
     4,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    16,    17,    18,    19,    20,    21,    22,    23,
    24,    25,    26,    27,    -1,    -1,    -1,    31,    32,    33,
    34,    -1,    36,    37,    38,    39,    40,    41,    42,    43,
    -1,    45,     5,     6,     7,    -1,    -1,    -1,    -1,    -1,
    -1,    -1,    -1,    16,    17,    18,    19,    20,    21,    22,
    23,    24,    25,    26,    27,    -1,    -1,    -1,    -1,    -1,
    33,    34,    -1,    36,    37,    38,    39,    40,    41,    42,
    43,    -1,    45
};
#define YYPURE 1

/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */

/* Skeleton output parser for bison,
   Copyright (C) 1984, 1989, 1990 Free Software Foundation, Inc.

   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */

/* As a special exception, when this file is copied by Bison into a
   Bison output file, you may use that output file without restriction.
   This special exception was added by the Free Software Foundation
   in version 1.24 of Bison.  */

#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not __GNUC__ */
#if HAVE_ALLOCA_H
#include <alloca.h>
#else /* not HAVE_ALLOCA_H */
#ifdef _AIX
 #pragma alloca
#else /* not _AIX */
char *alloca ();
#endif /* not _AIX */
#endif /* not HAVE_ALLOCA_H */
#endif /* not __GNUC__ */

extern void yyerror(char* s);

#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#else /* not GNU C.  */
#if (!defined (__STDC__) && defined (sparc)) || defined (__sparc__) || defined (__sparc) || defined (__sgi)
#include <alloca.h>
#else /* not sparc */
#if (defined (MSDOS) && !defined (__TURBOC__)) || defined (WIN32)
#include <malloc.h>
#else /* not MSDOS, or __TURBOC__ */
#if defined(_AIX)
#include <malloc.h>
 #pragma alloca
#else /* not MSDOS, __TURBOC__, or _AIX */
#ifdef __hpux
#ifdef __cplusplus
extern "C" {
void *alloca (unsigned int);
};
#else /* not __cplusplus */
void *alloca ();
#endif /* not __cplusplus */
#endif /* __hpux */
#endif /* not _AIX */
#endif /* not MSDOS, or __TURBOC__ */
#endif /* not sparc.  */
#endif /* not GNU C.  */
#endif /* alloca not defined.  */

/* This is the parser code that is written into each bison parser
  when the %semantic_parser declaration is not specified in the grammar.
  It was written by Richard Stallman by simplifying the hairy parser
  used when %semantic_parser is specified.  */

/* Note: there must be only one dollar sign in this file.
   It is replaced by the list of actions, each action
   as one case of the switch.  */

#define yyerrok		(yyerrstatus = 0)
#define yyclearin	(yychar = YYEMPTY)
#define YYEMPTY		-2
#define YYEOF		0
#define YYACCEPT	return(0)
#define YYABORT 	return(1)
#define YYERROR		goto yyerrlab1
/* Like YYERROR except do call yyerror.
   This remains here temporarily to ease the
   transition to the new meaning of YYERROR, for GCC.
   Once GCC version 2 has supplanted version 1, this can go.  */
#define YYFAIL		goto yyerrlab
#define YYRECOVERING()  (!!yyerrstatus)
#define YYBACKUP(token, value) \
do								\
  if (yychar == YYEMPTY && yylen == 1)				\
    { yychar = (token), yylval = (value);			\
      yychar1 = YYTRANSLATE (yychar);				\
      YYPOPSTACK;						\
      goto yybackup;						\
    }								\
  else								\
    { yyerror ("syntax error: cannot back up"); YYERROR; }	\
while (0)

#define YYTERROR	1
#define YYERRCODE	256

#ifndef YYPURE
#define YYLEX		yylex()
#endif

#ifdef YYPURE
#ifdef YYLSP_NEEDED
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, &yylloc, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval, &yylloc)
#endif
#else /* not YYLSP_NEEDED */
#ifdef YYLEX_PARAM
#define YYLEX		yylex(&yylval, YYLEX_PARAM)
#else
#define YYLEX		yylex(&yylval)
#endif
#endif /* not YYLSP_NEEDED */
#endif

/* If nonreentrant, generate the variables here */

#ifndef YYPURE

int	yychar;			/*  the lookahead symbol		*/
YYSTYPE	yylval;			/*  the semantic value of the		*/
				/*  lookahead symbol			*/

#ifdef YYLSP_NEEDED
YYLTYPE yylloc;			/*  location data for the lookahead	*/
				/*  symbol				*/
#endif

int yynerrs;			/*  number of parse errors so far       */
#endif  /* not YYPURE */

#if YYDEBUG != 0
int yydebug;			/*  nonzero means print parse trace	*/
/* Since this is uninitialized, it does not stop multiple parsers
   from coexisting.  */
#endif

/*  YYINITDEPTH indicates the initial size of the parser's stacks	*/

#ifndef	YYINITDEPTH
#define YYINITDEPTH 200
#endif

/*  YYMAXDEPTH is the maximum size the stacks can grow to
    (effective only if the built-in stack extension method is used).  */

#if YYMAXDEPTH == 0
#undef YYMAXDEPTH
#endif

#ifndef YYMAXDEPTH
#define YYMAXDEPTH 10000
#endif

/* Prevent warning if -Wstrict-prototypes.  */
#ifdef __GNUC__
int yyparse (void);
#endif

#if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
#define __yy_memcpy(FROM,TO,COUNT)	__builtin_memcpy(TO,FROM,COUNT)
#else				/* not GNU C or C++ */
#ifndef __cplusplus

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (from, to, count)
     char *from;
     char *to;
     size_t count;
{
  register char *f = from;
  register char *t = to;
  register size_t i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#else /* __cplusplus */

/* This is the most reliable way to avoid incompatibilities
   in available built-in functions on various systems.  */
static void
__yy_memcpy (char *from, char *to, size_t count)
{
  register char *f = from;
  register char *t = to;
  register size_t i = count;

  while (i-- > 0)
    *t++ = *f++;
}

#endif
#endif

/* The user can define YYPARSE_PARAM as the name of an argument to be passed
   into yyparse.  The argument should have type void *.
   It should actually point to an object.
   Grammar actions can access the variable by casting it
   to the proper pointer type.  */

#ifdef YYPARSE_PARAM
#ifndef YYPARSE_PARAM_DECL
#define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
#endif 
#else
#define YYPARSE_PARAM
#define YYPARSE_PARAM_DECL
#endif

extern YY_DECL;

int
yyparse(YYPARSE_PARAM_DECL YYPARSE_PARAM) {
  register int yystate;
  register int yyn;
  register short *yyssp;
  register YYSTYPE *yyvsp;
  int yyerrstatus;	/*  number of tokens to shift before error messages enabled */
  int yychar1 = 0;		/*  lookahead token as an internal (translated) token number */

  short	yyssa[YYINITDEPTH];	/*  the state stack			*/
  YYSTYPE yyvsa[YYINITDEPTH];	/*  the semantic value stack		*/

  short *yyss = yyssa;		/*  refer to the stacks thru separate pointers */
  YYSTYPE *yyvs = yyvsa;	/*  to allow yyoverflow to reallocate them elsewhere */

#ifdef YYLSP_NEEDED
  YYLTYPE yylsa[YYINITDEPTH];	/*  the location stack			*/
  YYLTYPE *yyls = yylsa;
  YYLTYPE *yylsp;

#define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
#else
#define YYPOPSTACK   (yyvsp--, yyssp--)
#endif

  size_t yystacksize = YYINITDEPTH;

#ifdef YYPURE
  int yychar;
  YYSTYPE yylval;
  int yynerrs;
#ifdef YYLSP_NEEDED
  YYLTYPE yylloc;
#endif
#endif

  YYSTYPE yyval;		/*  the variable used to return		*/
				/*  semantic values from the action	*/
				/*  routines				*/

  int yylen;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Starting parse\n");
#endif

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY;		/* Cause a token to be read.  */

  /* Initialize stack pointers.
     Waste one element of value and location stack
     so that they stay on the same level as the state stack.
     The wasted elements are never initialized.  */

  yyssp = yyss - 1;
  yyvsp = yyvs;
#ifdef YYLSP_NEEDED
  yylsp = yyls;
#endif

/* Push a new state, which is found in  yystate  .  */
/* In all cases, when you get here, the value and location stacks
   have just been pushed. so pushing a state here evens the stacks.  */
yynewstate:

  *++yyssp = yystate;

  if (yyssp >= yyss + yystacksize - 1)
    {
      /* Give user a chance to reallocate the stack */
      /* Use copies of these so that the &'s don't force the real ones into memory. */
      YYSTYPE *yyvs1 = yyvs;
      short *yyss1 = yyss;
#ifdef YYLSP_NEEDED
      YYLTYPE *yyls1 = yyls;
#endif

      /* Get the current used size of the three stacks, in elements.  */
      size_t size = yyssp - yyss + 1;

#ifdef yyoverflow
      /* Each stack pointer address is followed by the size of
	 the data in use in that stack, in bytes.  */
#ifdef YYLSP_NEEDED
      /* This used to be a conditional around just the two extra args,
	 but that might be undefined if yyoverflow is a macro.  */
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yyls1, size * sizeof (*yylsp),
		 &yystacksize);
#else
      yyoverflow("parser stack overflow",
		 &yyss1, size * sizeof (*yyssp),
		 &yyvs1, size * sizeof (*yyvsp),
		 &yystacksize);
#endif

      yyss = yyss1; yyvs = yyvs1;
#ifdef YYLSP_NEEDED
      yyls = yyls1;
#endif
#else /* no yyoverflow */
      /* Extend the stack our own way.  */
      if (yystacksize >= YYMAXDEPTH)
	{
	  yyerror("parser stack overflow");
	  return 2;
	}
      yystacksize *= 2;
      if (yystacksize > YYMAXDEPTH)
	yystacksize = YYMAXDEPTH;
      yyss = (short *) alloca (yystacksize * sizeof (*yyssp));
      __yy_memcpy ((char *)yyss1, (char *)yyss, size * sizeof (*yyssp));
      yyvs = (YYSTYPE *) alloca (yystacksize * sizeof (*yyvsp));
      __yy_memcpy ((char *)yyvs1, (char *)yyvs, size * sizeof (*yyvsp));
#ifdef YYLSP_NEEDED
      yyls = (YYLTYPE *) alloca (yystacksize * sizeof (*yylsp));
      __yy_memcpy ((char *)yyls1, (char *)yyls, size * sizeof (*yylsp));
#endif
#endif /* no yyoverflow */

      yyssp = yyss + size - 1;
      yyvsp = yyvs + size - 1;
#ifdef YYLSP_NEEDED
      yylsp = yyls + size - 1;
#endif

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Stack size increased to %d\n", yystacksize);
#endif

      if (yyssp >= yyss + yystacksize - 1)
	YYABORT;
    }

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Entering state %d\n", yystate);
#endif

  goto yybackup;
 yybackup:

/* Do appropriate processing given the current state.  */
/* Read a lookahead token if we need one and don't already have one.  */
/* yyresume: */

  /* First try to decide what to do without reference to lookahead token.  */

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* yychar is either YYEMPTY or YYEOF
     or a valid token in external form.  */

  if (yychar == YYEMPTY)
    {
#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Reading a token: ");
#endif
      yychar = YYLEX;
    }

  /* Convert token to internal form (in yychar1) for indexing tables with */

  if (yychar <= 0)		/* This means end of input. */
    {
      yychar1 = 0;
      yychar = YYEOF;		/* Don't call YYLEX any more */

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Now at end of input.\n");
#endif
    }
  else
    {
      yychar1 = YYTRANSLATE(yychar);

#if YYDEBUG != 0
      if (yydebug)
	{
	  fprintf (stderr, "Next token is %d (%s", yychar, yytname[yychar1]);
	  /* Give the individual parser a way to print the precise meaning
	     of a token, for further debugging info.  */
#ifdef YYPRINT
	  YYPRINT (stderr, yychar, yylval);
#endif
	  fprintf (stderr, ")\n");
	}
#endif
    }

  yyn += yychar1;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
    goto yydefault;

  yyn = yytable[yyn];

  /* yyn is what to do for this token type in this state.
     Negative => reduce, -yyn is rule number.
     Positive => shift, yyn is new state.
       New state is final state => don't bother to shift,
       just return success.
     0, or most negative number => error.  */

  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrlab;

  if (yyn == YYFINAL)
    YYACCEPT;

  /* Shift the lookahead token.  */

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting token %d (%s), ", yychar, yytname[yychar1]);
#endif

  /* Discard the token being shifted unless it is eof.  */
  if (yychar != YYEOF)
    yychar = YYEMPTY;

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  /* count tokens shifted since error; after three, turn off error status.  */
  if (yyerrstatus) yyerrstatus--;

  yystate = yyn;
  goto yynewstate;

/* Do the default action for the current state.  */
yydefault:

  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;

/* Do a reduction.  yyn is the number of a rule to reduce with.  */
yyreduce:
  yylen = yyr2[yyn];
  if (yylen > 0)
    yyval = yyvsp[1-yylen]; /* implement default value of the action */

#if YYDEBUG != 0
  if (yydebug)
    {
      int i;

      fprintf (stderr, "Reducing via rule %d (line %d), ",
	       yyn, yyrline[yyn]);

      /* Print the symbols being reduced, and their result.  */
      for (i = yyprhs[yyn]; yyrhs[i] > 0; i++)
	fprintf (stderr, "%s ", yytname[yyrhs[i]]);
      fprintf (stderr, " -> %s\n", yytname[yyr1[yyn]]);
    }
#endif


  switch (yyn) {

case 1:
#line 214 "glslang.y"
{
        // The symbol table search was done in the lexical phase
        const TSymbol* symbol = yyvsp[0].lex.symbol;
        const TVariable* variable;
        if (symbol == 0) {
            parseContext.error(yyvsp[0].lex.line, "undeclared identifier", yyvsp[0].lex.string->c_str(), "");
            parseContext.recover();
            TType type(EbtFloat);
            TVariable* fakeVariable = new TVariable(yyvsp[0].lex.string, type);
            parseContext.symbolTable.insert(*fakeVariable);
            variable = fakeVariable;
        } else {
            // This identifier can only be a variable type symbol 
            if (! symbol->isVariable()) {
                parseContext.error(yyvsp[0].lex.line, "variable expected", yyvsp[0].lex.string->c_str(), "");
                parseContext.recover();
            }
            variable = static_cast<const TVariable*>(symbol);
        }

        // don't delete $1.string, it's used by error recovery, and the pool
        // pop will reclaim the memory

        if (variable->getType().getQualifier() == EvqConst ) {
            constUnion* constArray = variable->getConstPointer();
            TType t(variable->getType());
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(constArray, t, yyvsp[0].lex.line);        
        } else
            yyval.interm.intermTypedNode = parseContext.intermediate.addSymbol(variable->getUniqueId(), 
                                                     variable->getName(), 
                                                     variable->getType(), yyvsp[0].lex.line);
    ;
    break;}
case 2:
#line 249 "glslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 3:
#line 252 "glslang.y"
{
        //
        // INT_TYPE is only 16-bit plus sign bit for vertex/fragment shaders, 
        // check for overflow for constants
        //
        if (abs(yyvsp[0].lex.i) >= (1 << 16)) {
            parseContext.error(yyvsp[0].lex.line, " integer constant overflow", "", "");
            parseContext.recover();
        }
        constUnion *unionArray = new constUnion[1];
        unionArray->setIConst(yyvsp[0].lex.i);
        yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtInt, EvqConst), yyvsp[0].lex.line);
    ;
    break;}
case 4:
#line 265 "glslang.y"
{
        constUnion *unionArray = new constUnion[1];
        unionArray->setFConst(yyvsp[0].lex.f);
        yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtFloat, EvqConst), yyvsp[0].lex.line);
    ;
    break;}
case 5:
#line 270 "glslang.y"
{
        constUnion *unionArray = new constUnion[1];
        unionArray->setBConst(yyvsp[0].lex.b);
        yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[0].lex.line);
    ;
    break;}
case 6:
#line 275 "glslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[-1].interm.intermTypedNode;
    ;
    break;}
case 7:
#line 281 "glslang.y"
{ 
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 8:
#line 284 "glslang.y"
{
        if (!yyvsp[-3].interm.intermTypedNode->isArray() && !yyvsp[-3].interm.intermTypedNode->isMatrix() && !yyvsp[-3].interm.intermTypedNode->isVector()) {
            if (yyvsp[-3].interm.intermTypedNode->getAsSymbolNode())
                parseContext.error(yyvsp[-2].lex.line, " left of '[' is not of type array, matrix, or vector ", yyvsp[-3].interm.intermTypedNode->getAsSymbolNode()->getSymbol().c_str(), "");
            else
                parseContext.error(yyvsp[-2].lex.line, " left of '[' is not of type array, matrix, or vector ", "expression", "");
            parseContext.recover();
        }
        if (yyvsp[-3].interm.intermTypedNode->getType().getQualifier() == EvqConst && yyvsp[-1].interm.intermTypedNode->getQualifier() == EvqConst) {
            if (yyvsp[-3].interm.intermTypedNode->isArray()) { // constant folding for arrays
                yyval.interm.intermTypedNode = parseContext.addConstArrayNode(yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst(), yyvsp[-3].interm.intermTypedNode, yyvsp[-2].lex.line);
            } else if (yyvsp[-3].interm.intermTypedNode->isVector()) {  // constant folding for vectors
                TVectorFields fields;                
                fields.num = 1;
                fields.offsets[0] = yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst(); // need to do it this way because v.xy sends fields integer array
                yyval.interm.intermTypedNode = parseContext.addConstVectorNode(fields, yyvsp[-3].interm.intermTypedNode, yyvsp[-2].lex.line);
            } else if (yyvsp[-3].interm.intermTypedNode->isMatrix()) { // constant folding for matrices
                yyval.interm.intermTypedNode = parseContext.addConstMatrixNode(yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst(), yyvsp[-3].interm.intermTypedNode, yyvsp[-2].lex.line);
            } 
        } else {
            if (yyvsp[-1].interm.intermTypedNode->getQualifier() == EvqConst) {
                if ((yyvsp[-3].interm.intermTypedNode->isVector() || yyvsp[-3].interm.intermTypedNode->isMatrix()) && yyvsp[-3].interm.intermTypedNode->getType().getNominalSize() <= yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst() && !yyvsp[-3].interm.intermTypedNode->isArray() ) {
                    parseContext.error(yyvsp[-2].lex.line, "", "[", "field selection out of range '%d'", yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst());
                    parseContext.recover();
                } else {
                    if (yyvsp[-3].interm.intermTypedNode->isArray()) {
                        if (yyvsp[-3].interm.intermTypedNode->getType().getArraySize() == 0) {
                            if (yyvsp[-3].interm.intermTypedNode->getType().getMaxArraySize() <= yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst()) {
                                if (parseContext.arraySetMaxSize(yyvsp[-3].interm.intermTypedNode->getAsSymbolNode(), yyvsp[-3].interm.intermTypedNode->getTypePointer(), yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst(), true, yyvsp[-2].lex.line))
                                    parseContext.recover(); 
                            } else {
                                if (parseContext.arraySetMaxSize(yyvsp[-3].interm.intermTypedNode->getAsSymbolNode(), yyvsp[-3].interm.intermTypedNode->getTypePointer(), 0, false, yyvsp[-2].lex.line))
                                    parseContext.recover(); 
                            }
                        } else if ( yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst() >= yyvsp[-3].interm.intermTypedNode->getType().getArraySize()) {
                            parseContext.error(yyvsp[-2].lex.line, "", "[", "array index out of range '%d'", yyvsp[-1].interm.intermTypedNode->getAsConstantUnion()->getUnionArrayPointer()->getIConst());
                            parseContext.recover();
                        }
                    }
                    yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpIndexDirect, yyvsp[-3].interm.intermTypedNode, yyvsp[-1].interm.intermTypedNode, yyvsp[-2].lex.line);
                }
            } else {
                if (yyvsp[-3].interm.intermTypedNode->isArray() && yyvsp[-3].interm.intermTypedNode->getType().getArraySize() == 0) {
                    parseContext.error(yyvsp[-2].lex.line, "", "[", "array must be redeclared with a size before being indexed with a variable");
                    parseContext.recover();
                }
                
                yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpIndexIndirect, yyvsp[-3].interm.intermTypedNode, yyvsp[-1].interm.intermTypedNode, yyvsp[-2].lex.line);
            }
        } 
        if (yyval.interm.intermTypedNode == 0) {
            constUnion *unionArray = new constUnion[1];
            unionArray->setFConst(0.0f);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtFloat, EvqConst), yyvsp[-2].lex.line);
        } else if (yyvsp[-3].interm.intermTypedNode->isArray()) {
            if (yyvsp[-3].interm.intermTypedNode->getType().getStruct())
                yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getType().getStruct(), yyvsp[-3].interm.intermTypedNode->getType().getTypeName()));
            else
                yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), EvqTemporary, yyvsp[-3].interm.intermTypedNode->getNominalSize(), yyvsp[-3].interm.intermTypedNode->isMatrix()));
                
            if (yyvsp[-3].interm.intermTypedNode->getType().getQualifier() == EvqConst)
                yyval.interm.intermTypedNode->getTypePointer()->changeQualifier(EvqConst);
        } else if (yyvsp[-3].interm.intermTypedNode->isMatrix() && yyvsp[-3].interm.intermTypedNode->getType().getQualifier() == EvqConst)         
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), EvqConst, yyvsp[-3].interm.intermTypedNode->getNominalSize()));     
        else if (yyvsp[-3].interm.intermTypedNode->isMatrix())            
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), EvqTemporary, yyvsp[-3].interm.intermTypedNode->getNominalSize()));     
        else if (yyvsp[-3].interm.intermTypedNode->isVector() && yyvsp[-3].interm.intermTypedNode->getType().getQualifier() == EvqConst)          
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), EvqConst));     
        else if (yyvsp[-3].interm.intermTypedNode->isVector())       
            yyval.interm.intermTypedNode->setType(TType(yyvsp[-3].interm.intermTypedNode->getBasicType(), EvqTemporary));
        else
            yyval.interm.intermTypedNode->setType(yyvsp[-3].interm.intermTypedNode->getType()); 
    ;
    break;}
case 9:
#line 357 "glslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 10:
#line 360 "glslang.y"
{        
        if (yyvsp[-2].interm.intermTypedNode->isArray()) {
            parseContext.error(yyvsp[0].lex.line, "cannot apply dot operator to an array", ".", "");
            parseContext.recover();
        }

        if (yyvsp[-2].interm.intermTypedNode->isVector()) {
            TVectorFields fields;
            if (! parseContext.parseVectorFields(*yyvsp[0].lex.string, yyvsp[-2].interm.intermTypedNode->getNominalSize(), fields, yyvsp[0].lex.line)) {
                fields.num = 1;
                fields.offsets[0] = 0;
                parseContext.recover();
            }

            if (yyvsp[-2].interm.intermTypedNode->getType().getQualifier() == EvqConst) { // constant folding for vector fields
                yyval.interm.intermTypedNode = parseContext.addConstVectorNode(fields, yyvsp[-2].interm.intermTypedNode, yyvsp[0].lex.line);
                if (yyval.interm.intermTypedNode == 0) {
                    parseContext.recover();
                    yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
                }
                else
                    yyval.interm.intermTypedNode->setType(TType(yyvsp[-2].interm.intermTypedNode->getBasicType(), EvqConst, (int) (*yyvsp[0].lex.string).size()));
            } else {
                if (fields.num == 1) {
                    constUnion *unionArray = new constUnion[1];
                    unionArray->setIConst(fields.offsets[0]);
                    TIntermTyped* index = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtInt, EvqConst), yyvsp[0].lex.line);
                    yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpIndexDirect, yyvsp[-2].interm.intermTypedNode, index, yyvsp[-1].lex.line);
                    yyval.interm.intermTypedNode->setType(TType(yyvsp[-2].interm.intermTypedNode->getBasicType()));
                } else {
                    TString vectorString = *yyvsp[0].lex.string;
                    TIntermTyped* index = parseContext.intermediate.addSwizzle(fields, yyvsp[0].lex.line);                
                    yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpVectorSwizzle, yyvsp[-2].interm.intermTypedNode, index, yyvsp[-1].lex.line);
                    yyval.interm.intermTypedNode->setType(TType(yyvsp[-2].interm.intermTypedNode->getBasicType(),EvqTemporary, (int) vectorString.size()));  
                }
            }
        } else if (yyvsp[-2].interm.intermTypedNode->isMatrix()) {
            TMatrixFields fields;
            if (! parseContext.parseMatrixFields(*yyvsp[0].lex.string, yyvsp[-2].interm.intermTypedNode->getNominalSize(), fields, yyvsp[0].lex.line)) {
                fields.wholeRow = false;
                fields.wholeCol = false;
                fields.row = 0;
                fields.col = 0;
                parseContext.recover();
            }

            if (fields.wholeRow || fields.wholeCol) {
                parseContext.error(yyvsp[-1].lex.line, " non-scalar fields not implemented yet", ".", "");
                parseContext.recover();
                constUnion *unionArray = new constUnion[1];
                unionArray->setIConst(0);
                TIntermTyped* index = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtInt, EvqConst), yyvsp[0].lex.line);
                yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpIndexDirect, yyvsp[-2].interm.intermTypedNode, index, yyvsp[-1].lex.line);                
                yyval.interm.intermTypedNode->setType(TType(yyvsp[-2].interm.intermTypedNode->getBasicType(), EvqTemporary, yyvsp[-2].interm.intermTypedNode->getNominalSize()));
            } else {
                constUnion *unionArray = new constUnion[1];
                unionArray->setIConst(fields.col * yyvsp[-2].interm.intermTypedNode->getNominalSize() + fields.row);
                TIntermTyped* index = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtInt, EvqConst), yyvsp[0].lex.line);
                yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpIndexDirect, yyvsp[-2].interm.intermTypedNode, index, yyvsp[-1].lex.line);                
                yyval.interm.intermTypedNode->setType(TType(yyvsp[-2].interm.intermTypedNode->getBasicType()));
            }
        } else if (yyvsp[-2].interm.intermTypedNode->getBasicType() == EbtStruct) {
            bool fieldFound = false;
            TTypeList* fields = yyvsp[-2].interm.intermTypedNode->getType().getStruct();
            if (fields == 0) {
                parseContext.error(yyvsp[-1].lex.line, "structure has no fields", "Internal Error", "");
                parseContext.recover();
                yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
            } else {
                unsigned int i;
                for (i = 0; i < fields->size(); ++i) {
                    if ((*fields)[i].type->getFieldName() == *yyvsp[0].lex.string) {
                        fieldFound = true;
                        break;
                    }                
                }
                if (fieldFound) {
                    if (yyvsp[-2].interm.intermTypedNode->getType().getQualifier() == EvqConst) {
                        yyval.interm.intermTypedNode = parseContext.addConstStruct(*yyvsp[0].lex.string, yyvsp[-2].interm.intermTypedNode, yyvsp[-1].lex.line);
                        if (yyval.interm.intermTypedNode == 0) {
                            parseContext.recover();
                            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
                        }
                        else {
                            yyval.interm.intermTypedNode->setType(*(*fields)[i].type);
                            // change the qualifier of the return type, not of the structure field
                            // as the structure definition is shared between various structures.
                            yyval.interm.intermTypedNode->getTypePointer()->changeQualifier(EvqConst);
                        }
                    } else {
                        constUnion *unionArray = new constUnion[1];
                        unionArray->setIConst(i);
                        TIntermTyped* index = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtInt, EvqConst), yyvsp[0].lex.line);
                        yyval.interm.intermTypedNode = parseContext.intermediate.addIndex(EOpIndexDirectStruct, yyvsp[-2].interm.intermTypedNode, index, yyvsp[-1].lex.line);                
                        yyval.interm.intermTypedNode->setType(*(*fields)[i].type);
                    }
                } else {
                    parseContext.error(yyvsp[-1].lex.line, " no such field in structure", yyvsp[0].lex.string->c_str(), "");
                    parseContext.recover();
                    yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
                }
            }
        } else {
            parseContext.error(yyvsp[-1].lex.line, " field selection requires structure, vector, or matrix on left hand side", yyvsp[0].lex.string->c_str(), "");
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
        // don't delete $3.string, it's from the pool
    ;
    break;}
case 11:
#line 469 "glslang.y"
{
        if (parseContext.lValueErrorCheck(yyvsp[0].lex.line, "++", yyvsp[-1].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(EOpPostIncrement, yyvsp[-1].interm.intermTypedNode, yyvsp[0].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.unaryOpError(yyvsp[0].lex.line, "++", yyvsp[-1].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-1].interm.intermTypedNode;
        }
    ;
    break;}
case 12:
#line 479 "glslang.y"
{
        if (parseContext.lValueErrorCheck(yyvsp[0].lex.line, "--", yyvsp[-1].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(EOpPostDecrement, yyvsp[-1].interm.intermTypedNode, yyvsp[0].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.unaryOpError(yyvsp[0].lex.line, "--", yyvsp[-1].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-1].interm.intermTypedNode;
        }
    ;
    break;}
case 13:
#line 492 "glslang.y"
{
        if (parseContext.integerErrorCheck(yyvsp[0].interm.intermTypedNode, "[]"))
            parseContext.recover();
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; 
    ;
    break;}
case 14:
#line 500 "glslang.y"
{
        TFunction* fnCall = yyvsp[0].interm.function;
        TOperator op = fnCall->getBuiltInOp();
        
        if (op == EOpArrayLength) {
            if (yyvsp[0].interm.intermNode->getAsTyped() == 0 || yyvsp[0].interm.intermNode->getAsTyped()->getType().getArraySize() == 0) {
                parseContext.error(yyvsp[0].interm.line, "", fnCall->getName().c_str(), "array must be declared with a size before using this method");
                parseContext.recover();
            }

            constUnion *unionArray = new constUnion[1];
            unionArray->setIConst(yyvsp[0].interm.intermNode->getAsTyped()->getType().getArraySize());
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtInt, EvqConst), yyvsp[0].interm.line);
        } else if (op != EOpNull) {
            //
            // Then this should be a constructor.
            // Don't go through the symbol table for constructors.  
            // Their parameters will be verified algorithmically.
            //
            TType type(EbtVoid);  // use this to get the type back
            if (parseContext.constructorErrorCheck(yyvsp[0].interm.line, yyvsp[0].interm.intermNode, *fnCall, op, &type)) {
                yyval.interm.intermTypedNode = 0;
            } else {
                //
                // It's a constructor, of type 'type'.
                //
                yyval.interm.intermTypedNode = parseContext.addConstructor(yyvsp[0].interm.intermNode, &type, op, fnCall, yyvsp[0].interm.line);
            }
            
            if (yyval.interm.intermTypedNode == 0) {        
                parseContext.recover();
                yyval.interm.intermTypedNode = parseContext.intermediate.setAggregateOperator(0, op, yyvsp[0].interm.line);
            }
            yyval.interm.intermTypedNode->setType(type);
        } else {
            //
            // Not a constructor.  Find it in the symbol table.
            //
            const TFunction* fnCandidate;
            bool builtIn;
            fnCandidate = parseContext.findFunction(yyvsp[0].interm.line, fnCall, &builtIn);
            if (fnCandidate) {
                //
                // A declared function.  But, it might still map to a built-in
                // operation.
                //
                op = fnCandidate->getBuiltInOp();
                if (builtIn && op != EOpNull) {
                    //
                    // A function call mapped to a built-in operation.
                    //
                    if (fnCandidate->getParamCount() == 1) {
                        //
                        // Treat it like a built-in unary operator.
                        //
                        yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(op, yyvsp[0].interm.intermNode, 0, parseContext.symbolTable);
                        if (yyval.interm.intermTypedNode == 0)  {
                            parseContext.error(yyvsp[0].interm.intermNode->getLine(), " wrong operand type", "Internal Error", 
                                "built in unary operator function.  Type: %s",
                                static_cast<TIntermTyped*>(yyvsp[0].interm.intermNode)->getCompleteString().c_str());
                            YYERROR;
                        }
                    } else {
                        yyval.interm.intermTypedNode = parseContext.intermediate.setAggregateOperator(yyvsp[0].interm.intermAggregate, op, yyvsp[0].interm.line);
                    }
                } else {
                    // This is a real function call
                    
                    yyval.interm.intermTypedNode = parseContext.intermediate.setAggregateOperator(yyvsp[0].interm.intermAggregate, EOpFunctionCall, yyvsp[0].interm.line);
                    yyval.interm.intermTypedNode->setType(fnCandidate->getReturnType());                   
                    
                    // this is how we know whether the given function is a builtIn function or a user defined function
                    // if builtIn == false, it's a userDefined -> could be an overloaded builtIn function also
                    // if builtIn == true, it's definitely a builtIn function with EOpNull
                    if (!builtIn) 
                        yyval.interm.intermTypedNode->getAsAggregate()->setUserDefined(); 
                    yyval.interm.intermTypedNode->getAsAggregate()->setName(fnCandidate->getMangledName());

                    TQualifier qual;
                    TQualifierList& qualifierList = yyval.interm.intermTypedNode->getAsAggregate()->getQualifier();
                    for (int i = 0; i < fnCandidate->getParamCount(); ++i) {
                        qual = (*fnCandidate)[i].type->getQualifier();
                        if (qual == EvqOut || qual == EvqInOut) {
                            if (parseContext.lValueErrorCheck(yyval.interm.intermTypedNode->getLine(), "assign", yyval.interm.intermTypedNode->getAsAggregate()->getSequence()[i]->getAsTyped())) {
                                parseContext.error(yyvsp[0].interm.intermNode->getLine(), "Constant value cannot be passed for 'out' or 'inout' parameters.", "Error", "");
                                parseContext.recover();
                            }
                        }
                        qualifierList.push_back(qual);
                    }
                }
                yyval.interm.intermTypedNode->setType(fnCandidate->getReturnType());
            } else {
                // error message was put out by PaFindFunction()
                // Put on a dummy node for error recovery
                constUnion *unionArray = new constUnion[1];
                unionArray->setFConst(0.0f);
                yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtFloat, EvqConst), yyvsp[0].interm.line);
                parseContext.recover();
            }
        }
        delete fnCall;
    ;
    break;}
case 15:
#line 606 "glslang.y"
{
        yyval.interm = yyvsp[0].interm;
    ;
    break;}
case 16:
#line 609 "glslang.y"
{
        if (yyvsp[-2].interm.intermTypedNode->isArray() && yyvsp[0].interm.function->getName() == "length") {
            //
            // implement array.length()
            //
            if (parseContext.extensionErrorCheck(yyvsp[0].interm.line, "GL_3DL_array_objects")) {
                parseContext.recover();
                yyval.interm = yyvsp[0].interm;
            } else {
                yyval.interm = yyvsp[0].interm;
                yyval.interm.intermNode = yyvsp[-2].interm.intermTypedNode;
                yyval.interm.function->relateToOperator(EOpArrayLength);
            }
        } else {
            parseContext.error(yyvsp[0].interm.line, "methods are not supported", "", "");
            parseContext.recover();
            yyval.interm = yyvsp[0].interm;
        }
    ;
    break;}
case 17:
#line 631 "glslang.y"
{
        yyval.interm = yyvsp[-1].interm;
        yyval.interm.line = yyvsp[0].lex.line;
    ;
    break;}
case 18:
#line 635 "glslang.y"
{
        yyval.interm = yyvsp[-1].interm;
        yyval.interm.line = yyvsp[0].lex.line;
    ;
    break;}
case 19:
#line 642 "glslang.y"
{
        yyval.interm.function = yyvsp[-1].interm.function;
        yyval.interm.intermNode = 0;
    ;
    break;}
case 20:
#line 646 "glslang.y"
{
        yyval.interm.function = yyvsp[0].interm.function;
        yyval.interm.intermNode = 0;
    ;
    break;}
case 21:
#line 653 "glslang.y"
{
        TParameter param = { 0, new TType(yyvsp[0].interm.intermTypedNode->getType()) };
        yyvsp[-1].interm.function->addParameter(param);
        yyval.interm.function = yyvsp[-1].interm.function;
        yyval.interm.intermNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 22:
#line 659 "glslang.y"
{
        TParameter param = { 0, new TType(yyvsp[0].interm.intermTypedNode->getType()) };
        yyvsp[-2].interm.function->addParameter(param);
        yyval.interm.function = yyvsp[-2].interm.function;
        yyval.interm.intermNode = parseContext.intermediate.growAggregate(yyvsp[-2].interm.intermNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line);
    ;
    break;}
case 23:
#line 668 "glslang.y"
{
        yyval.interm.function = yyvsp[-1].interm.function;
    ;
    break;}
case 24:
#line 676 "glslang.y"
{
        //
        // Constructor
        //
        if (yyvsp[0].interm.type.array) {
            if (parseContext.extensionErrorCheck(yyvsp[0].interm.type.line, "GL_3DL_array_objects")) {
                parseContext.recover();
                yyvsp[0].interm.type.setArray(false);
            }
        }

        if (yyvsp[0].interm.type.userDef) {
            TString tempString = "";
            TType type(yyvsp[0].interm.type);
            TFunction *function = new TFunction(&tempString, type, EOpConstructStruct);
            yyval.interm.function = function;
        } else {
            TOperator op = EOpNull;
            switch (yyvsp[0].interm.type.type) {
            case EbtFloat:
                if (yyvsp[0].interm.type.matrix) {
                    switch(yyvsp[0].interm.type.size) {
                    case 2:                                     op = EOpConstructMat2;  break;
                    case 3:                                     op = EOpConstructMat3;  break;
                    case 4:                                     op = EOpConstructMat4;  break;
                    }         
                } else {      
                    switch(yyvsp[0].interm.type.size) {
                    case 1:                                     op = EOpConstructFloat; break;
                    case 2:                                     op = EOpConstructVec2;  break;
                    case 3:                                     op = EOpConstructVec3;  break;
                    case 4:                                     op = EOpConstructVec4;  break;
                    }       
                }  
                break;               
            case EbtInt:
                switch(yyvsp[0].interm.type.size) {
                case 1:                                         op = EOpConstructInt;   break;
                case 2:       FRAG_VERT_ONLY("ivec2", yyvsp[0].interm.type.line); op = EOpConstructIVec2; break;
                case 3:       FRAG_VERT_ONLY("ivec3", yyvsp[0].interm.type.line); op = EOpConstructIVec3; break;
                case 4:       FRAG_VERT_ONLY("ivec4", yyvsp[0].interm.type.line); op = EOpConstructIVec4; break;
                }         
                break;    
            case EbtBool:
                switch(yyvsp[0].interm.type.size) {
                case 1:                                         op = EOpConstructBool;  break;
                case 2:       FRAG_VERT_ONLY("bvec2", yyvsp[0].interm.type.line); op = EOpConstructBVec2; break;
                case 3:       FRAG_VERT_ONLY("bvec3", yyvsp[0].interm.type.line); op = EOpConstructBVec3; break;
                case 4:       FRAG_VERT_ONLY("bvec4", yyvsp[0].interm.type.line); op = EOpConstructBVec4; break;
                }         
                break;
            }
            if (op == EOpNull) {                    
                parseContext.error(yyvsp[0].interm.type.line, "cannot construct this type", TType::getBasicString(yyvsp[0].interm.type.type), "");
                parseContext.recover();
                yyvsp[0].interm.type.type = EbtFloat;
                op = EOpConstructFloat;
            }            
            TString tempString = "";
            TType type(yyvsp[0].interm.type);
            TFunction *function = new TFunction(&tempString, type, op);
            yyval.interm.function = function;
        }
    ;
    break;}
case 25:
#line 740 "glslang.y"
{
        if (parseContext.reservedErrorCheck(yyvsp[0].lex.line, *yyvsp[0].lex.string)) 
            parseContext.recover();
        TType type(EbtVoid);
        TFunction *function = new TFunction(yyvsp[0].lex.string, type);
        yyval.interm.function = function;
    ;
    break;}
case 26:
#line 747 "glslang.y"
{
        if (parseContext.reservedErrorCheck(yyvsp[0].lex.line, *yyvsp[0].lex.string)) 
            parseContext.recover();
        TType type(EbtVoid);
        TFunction *function = new TFunction(yyvsp[0].lex.string, type);
        yyval.interm.function = function;
    ;
    break;}
case 27:
#line 757 "glslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 28:
#line 760 "glslang.y"
{
        if (parseContext.lValueErrorCheck(yyvsp[-1].lex.line, "++", yyvsp[0].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(EOpPreIncrement, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.unaryOpError(yyvsp[-1].lex.line, "++", yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        }
    ;
    break;}
case 29:
#line 770 "glslang.y"
{
        if (parseContext.lValueErrorCheck(yyvsp[-1].lex.line, "--", yyvsp[0].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(EOpPreDecrement, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.unaryOpError(yyvsp[-1].lex.line, "--", yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        }
    ;
    break;}
case 30:
#line 780 "glslang.y"
{
        if (yyvsp[-1].interm.op != EOpNull) {
            yyval.interm.intermTypedNode = parseContext.intermediate.addUnaryMath(yyvsp[-1].interm.op, yyvsp[0].interm.intermTypedNode, yyvsp[-1].interm.line, parseContext.symbolTable);
            if (yyval.interm.intermTypedNode == 0) {
                char* errorOp = "";
                switch(yyvsp[-1].interm.op) {
                case EOpNegative:   errorOp = "-"; break;
                case EOpLogicalNot: errorOp = "!"; break;
                case EOpBitwiseNot: errorOp = "~"; break;
				default: break;
                }
                parseContext.unaryOpError(yyvsp[-1].interm.line, errorOp, yyvsp[0].interm.intermTypedNode->getCompleteString());
                parseContext.recover();
                yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
            }
        } else
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 31:
#line 802 "glslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpNull; ;
    break;}
case 32:
#line 803 "glslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpNegative; ;
    break;}
case 33:
#line 804 "glslang.y"
{ yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpLogicalNot; ;
    break;}
case 34:
#line 805 "glslang.y"
{ PACK_UNPACK_ONLY("~", yyvsp[0].lex.line);  
              yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpBitwiseNot; ;
    break;}
case 35:
#line 811 "glslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 36:
#line 812 "glslang.y"
{
        FRAG_VERT_ONLY("*", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpMul, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "*", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 37:
#line 821 "glslang.y"
{
        FRAG_VERT_ONLY("/", yyvsp[-1].lex.line); 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpDiv, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "/", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 38:
#line 830 "glslang.y"
{
        PACK_UNPACK_ONLY("%", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpMod, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "%", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 39:
#line 842 "glslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 40:
#line 843 "glslang.y"
{  
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpAdd, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "+", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 41:
#line 851 "glslang.y"
{
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpSub, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "-", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        } 
    ;
    break;}
case 42:
#line 862 "glslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 43:
#line 863 "glslang.y"
{
        PACK_UNPACK_ONLY("<<", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLeftShift, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "<<", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 44:
#line 872 "glslang.y"
{
        PACK_UNPACK_ONLY(">>", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpRightShift, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, ">>", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 45:
#line 884 "glslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 46:
#line 885 "glslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLessThan, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "<", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 47:
#line 895 "glslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpGreaterThan, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, ">", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 48:
#line 905 "glslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLessThanEqual, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "<=", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 49:
#line 915 "glslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpGreaterThanEqual, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, ">=", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 50:
#line 928 "glslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 51:
#line 929 "glslang.y"
{
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpEqual, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "==", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        } else if ((yyvsp[-2].interm.intermTypedNode->isArray() || yyvsp[0].interm.intermTypedNode->isArray()) && parseContext.extensionErrorCheck(yyvsp[-1].lex.line, "GL_3DL_array_objects"))
            parseContext.recover();
    ;
    break;}
case 52:
#line 940 "glslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpNotEqual, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "!=", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        } else if ((yyvsp[-2].interm.intermTypedNode->isArray() || yyvsp[0].interm.intermTypedNode->isArray()) && parseContext.extensionErrorCheck(yyvsp[-1].lex.line, "GL_3DL_array_objects"))
            parseContext.recover();
    ;
    break;}
case 53:
#line 954 "glslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 54:
#line 955 "glslang.y"
{
        PACK_UNPACK_ONLY("&", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpAnd, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "&", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 55:
#line 967 "glslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 56:
#line 968 "glslang.y"
{
        PACK_UNPACK_ONLY("^", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpExclusiveOr, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "^", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 57:
#line 980 "glslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 58:
#line 981 "glslang.y"
{
        PACK_UNPACK_ONLY("|", yyvsp[-1].lex.line);
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpInclusiveOr, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "|", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        }
    ;
    break;}
case 59:
#line 993 "glslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 60:
#line 994 "glslang.y"
{
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLogicalAnd, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "&&", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 61:
#line 1007 "glslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 62:
#line 1008 "glslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLogicalXor, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "^^", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 63:
#line 1021 "glslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 64:
#line 1022 "glslang.y"
{ 
        yyval.interm.intermTypedNode = parseContext.intermediate.addBinaryMath(EOpLogicalOr, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line, parseContext.symbolTable);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, "||", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            constUnion *unionArray = new constUnion[1];
            unionArray->setBConst(false);
            yyval.interm.intermTypedNode = parseContext.intermediate.addConstantUnion(unionArray, TType(EbtBool, EvqConst), yyvsp[-1].lex.line);
        }
    ;
    break;}
case 65:
#line 1035 "glslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 66:
#line 1036 "glslang.y"
{
       if (parseContext.boolErrorCheck(yyvsp[-3].lex.line, yyvsp[-4].interm.intermTypedNode))
            parseContext.recover();
       
        yyval.interm.intermTypedNode = parseContext.intermediate.addSelection(yyvsp[-4].interm.intermTypedNode, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-3].lex.line);
        if (yyvsp[-2].interm.intermTypedNode->getType() != yyvsp[0].interm.intermTypedNode->getType())
            yyval.interm.intermTypedNode = 0;
            
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-3].lex.line, ":", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        }
    ;
    break;}
case 67:
#line 1053 "glslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 68:
#line 1054 "glslang.y"
{        
        if (parseContext.lValueErrorCheck(yyvsp[-1].interm.line, "assign", yyvsp[-2].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = parseContext.intermediate.addAssign(yyvsp[-1].interm.op, yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].interm.line);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.assignError(yyvsp[-1].interm.line, "assign", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[-2].interm.intermTypedNode;
        } else if ((yyvsp[-2].interm.intermTypedNode->isArray() || yyvsp[0].interm.intermTypedNode->isArray()) && parseContext.extensionErrorCheck(yyvsp[-1].interm.line, "GL_3DL_array_objects"))
            parseContext.recover();
    ;
    break;}
case 69:
#line 1068 "glslang.y"
{                                    yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpAssign; ;
    break;}
case 70:
#line 1069 "glslang.y"
{ FRAG_VERT_ONLY("*=", yyvsp[0].lex.line);     yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpMulAssign; ;
    break;}
case 71:
#line 1070 "glslang.y"
{ FRAG_VERT_ONLY("/=", yyvsp[0].lex.line);     yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpDivAssign; ;
    break;}
case 72:
#line 1071 "glslang.y"
{ PACK_UNPACK_ONLY("%=", yyvsp[0].lex.line);   yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpModAssign; ;
    break;}
case 73:
#line 1072 "glslang.y"
{                                    yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpAddAssign; ;
    break;}
case 74:
#line 1073 "glslang.y"
{                                    yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpSubAssign; ;
    break;}
case 75:
#line 1074 "glslang.y"
{ PACK_UNPACK_ONLY("<<=", yyvsp[0].lex.line);  yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpLeftShiftAssign; ;
    break;}
case 76:
#line 1075 "glslang.y"
{ PACK_UNPACK_ONLY("<<=", yyvsp[0].lex.line);  yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpRightShiftAssign; ;
    break;}
case 77:
#line 1076 "glslang.y"
{ PACK_UNPACK_ONLY("&=",  yyvsp[0].lex.line);  yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpAndAssign; ;
    break;}
case 78:
#line 1077 "glslang.y"
{ PACK_UNPACK_ONLY("^=",  yyvsp[0].lex.line);  yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpExclusiveOrAssign; ;
    break;}
case 79:
#line 1078 "glslang.y"
{ PACK_UNPACK_ONLY("|=",  yyvsp[0].lex.line);  yyval.interm.line = yyvsp[0].lex.line; yyval.interm.op = EOpInclusiveOrAssign; ;
    break;}
case 80:
#line 1082 "glslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 81:
#line 1085 "glslang.y"
{
        yyval.interm.intermTypedNode = parseContext.intermediate.addComma(yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.intermTypedNode, yyvsp[-1].lex.line);
        if (yyval.interm.intermTypedNode == 0) {
            parseContext.binaryOpError(yyvsp[-1].lex.line, ",", yyvsp[-2].interm.intermTypedNode->getCompleteString(), yyvsp[0].interm.intermTypedNode->getCompleteString());
            parseContext.recover();
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        }
    ;
    break;}
case 82:
#line 1096 "glslang.y"
{
        if (parseContext.constErrorCheck(yyvsp[0].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 83:
#line 1104 "glslang.y"
{ yyval.interm.intermNode = 0; ;
    break;}
case 84:
#line 1105 "glslang.y"
{ 
        if (yyvsp[-1].interm.intermAggregate)
            yyvsp[-1].interm.intermAggregate->setOperator(EOpSequence); 
        yyval.interm.intermNode = yyvsp[-1].interm.intermAggregate; 
    ;
    break;}
case 85:
#line 1113 "glslang.y"
{
        //
        // Multiple declarations of the same function are allowed.
        //
        // If this is a definition, the definition production code will check for redefinitions 
        // (we don't know at this point if it's a definition or not).
        //
        // Redeclarations are allowed.  But, return types and parameter qualifiers must match.
        //        
        TFunction* prevDec = static_cast<TFunction*>(parseContext.symbolTable.find(yyvsp[-1].interm.function->getMangledName()));
        if (prevDec) {
            if (prevDec->getReturnType() != yyvsp[-1].interm.function->getReturnType()) {
                parseContext.error(yyvsp[0].lex.line, "overloaded functions must have the same return type", yyvsp[-1].interm.function->getReturnType().getBasicString(), "");
                parseContext.recover();
            }
            for (int i = 0; i < prevDec->getParamCount(); ++i) {
                if ((*prevDec)[i].type->getQualifier() != (*yyvsp[-1].interm.function)[i].type->getQualifier()) {
                    parseContext.error(yyvsp[0].lex.line, "overloaded functions must have the same parameter qualifiers", (*yyvsp[-1].interm.function)[i].type->getQualifierString(), "");
                    parseContext.recover();
                }
            }
        }
        
        //
        // If this is a redeclaration, it could also be a definition,
        // in which case, we want to use the variable names from this one, and not the one that's
        // being redeclared.  So, pass back up this declaration, not the one in the symbol table.
        //
        yyval.interm.function = yyvsp[-1].interm.function;
        yyval.interm.line = yyvsp[0].lex.line;

        parseContext.symbolTable.insert(*yyval.interm.function);
    ;
    break;}
case 86:
#line 1149 "glslang.y"
{
        yyval.interm.function = yyvsp[0].interm.function;
    ;
    break;}
case 87:
#line 1152 "glslang.y"
{ 
        yyval.interm.function = yyvsp[0].interm.function;  
    ;
    break;}
case 88:
#line 1159 "glslang.y"
{
        // Add the parameter 
        yyval.interm.function = yyvsp[-1].interm.function;
        if (yyvsp[0].interm.param.type->getBasicType() != EbtVoid)
            yyvsp[-1].interm.function->addParameter(yyvsp[0].interm.param);
        else
            delete yyvsp[0].interm.param.type;
    ;
    break;}
case 89:
#line 1167 "glslang.y"
{   
        //
        // Only first parameter of one-parameter functions can be void
        // The check for named parameters not being void is done in parameter_declarator 
        //
        if (yyvsp[0].interm.param.type->getBasicType() == EbtVoid) {
            //
            // This parameter > first is void
            //
            parseContext.error(yyvsp[-1].lex.line, "cannot be an argument type except for '(void)'", "void", "");
            parseContext.recover();
            delete yyvsp[0].interm.param.type;
        } else {
            // Add the parameter 
            yyval.interm.function = yyvsp[-2].interm.function; 
            yyvsp[-2].interm.function->addParameter(yyvsp[0].interm.param);
        }
    ;
    break;}
case 90:
#line 1188 "glslang.y"
{
        if (yyvsp[-2].interm.type.qualifier != EvqGlobal && yyvsp[-2].interm.type.qualifier != EvqTemporary) {
            parseContext.error(yyvsp[-1].lex.line, "no qualifiers allowed for function return", getQualifierString(yyvsp[-2].interm.type.qualifier), "");
            parseContext.recover();
        }
        // make sure a sampler is not involved as well...
        if (parseContext.structQualifierErrorCheck(yyvsp[-1].lex.line, yyvsp[-2].interm.type))
            parseContext.recover();
        
        // Add the function as a prototype after parsing it (we do not support recursion) 
        TFunction *function;
        TType type(yyvsp[-2].interm.type);
        function = new TFunction(yyvsp[-1].lex.string, type);
        yyval.interm.function = function;
    ;
    break;}
case 91:
#line 1207 "glslang.y"
{
        if (yyvsp[-1].interm.type.type == EbtVoid) {
            parseContext.error(yyvsp[0].lex.line, "illegal use of type 'void'", yyvsp[0].lex.string->c_str(), "");
            parseContext.recover();
        }
        if (parseContext.reservedErrorCheck(yyvsp[0].lex.line, *yyvsp[0].lex.string))
            parseContext.recover();
        TParameter param = {yyvsp[0].lex.string, new TType(yyvsp[-1].interm.type)};
        yyval.interm.line = yyvsp[0].lex.line;
        yyval.interm.param = param;
    ;
    break;}
case 92:
#line 1218 "glslang.y"
{
        // Check that we can make an array out of this type
        if (parseContext.arrayTypeErrorCheck(yyvsp[-2].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();
            
        if (parseContext.reservedErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string))
            parseContext.recover();
            
        int size;
        if (parseContext.arraySizeErrorCheck(yyvsp[-2].lex.line, yyvsp[-1].interm.intermTypedNode, size))
            parseContext.recover();
        yyvsp[-4].interm.type.setArray(true, size);
             
        TType* type = new TType(yyvsp[-4].interm.type);
        TParameter param = { yyvsp[-3].lex.string, type };
        yyval.interm.line = yyvsp[-3].lex.line;
        yyval.interm.param = param;
    ;
    break;}
case 93:
#line 1247 "glslang.y"
{
        yyval.interm = yyvsp[0].interm;
        if (parseContext.paramErrorCheck(yyvsp[0].interm.line, yyvsp[-2].interm.type.qualifier, yyvsp[-1].interm.qualifier, yyval.interm.param.type))
            parseContext.recover();
    ;
    break;}
case 94:
#line 1252 "glslang.y"
{
        yyval.interm = yyvsp[0].interm;
        if (parseContext.parameterSamplerErrorCheck(yyvsp[0].interm.line, yyvsp[-1].interm.qualifier, *yyvsp[0].interm.param.type))
            parseContext.recover();
        if (parseContext.paramErrorCheck(yyvsp[0].interm.line, EvqTemporary, yyvsp[-1].interm.qualifier, yyval.interm.param.type))
            parseContext.recover();
    ;
    break;}
case 95:
#line 1262 "glslang.y"
{
        yyval.interm = yyvsp[0].interm;
        if (parseContext.paramErrorCheck(yyvsp[0].interm.line, yyvsp[-2].interm.type.qualifier, yyvsp[-1].interm.qualifier, yyval.interm.param.type))
            parseContext.recover();
    ;
    break;}
case 96:
#line 1267 "glslang.y"
{
        yyval.interm = yyvsp[0].interm;
        if (parseContext.parameterSamplerErrorCheck(yyvsp[0].interm.line, yyvsp[-1].interm.qualifier, *yyvsp[0].interm.param.type))
            parseContext.recover();
        if (parseContext.paramErrorCheck(yyvsp[0].interm.line, EvqTemporary, yyvsp[-1].interm.qualifier, yyval.interm.param.type))
            parseContext.recover();
    ;
    break;}
case 97:
#line 1277 "glslang.y"
{
        yyval.interm.qualifier = EvqIn;
    ;
    break;}
case 98:
#line 1280 "glslang.y"
{
        yyval.interm.qualifier = EvqIn;
    ;
    break;}
case 99:
#line 1283 "glslang.y"
{
        yyval.interm.qualifier = EvqOut;
    ;
    break;}
case 100:
#line 1286 "glslang.y"
{
        yyval.interm.qualifier = EvqInOut;
    ;
    break;}
case 101:
#line 1292 "glslang.y"
{
        TParameter param = { 0, new TType(yyvsp[0].interm.type) };
        yyval.interm.param = param;
    ;
    break;}
case 102:
#line 1299 "glslang.y"
{
        yyval.interm = yyvsp[0].interm;
    ;
    break;}
case 103:
#line 1302 "glslang.y"
{
        yyval.interm = yyvsp[-2].interm;
        if (parseContext.structQualifierErrorCheck(yyvsp[0].lex.line, yyval.interm.type))
            parseContext.recover();
        
        if (parseContext.nonInitConstErrorCheck(yyvsp[0].lex.line, *yyvsp[0].lex.string, yyval.interm.type))
            parseContext.recover();

        if (parseContext.nonInitErrorCheck(yyvsp[0].lex.line, *yyvsp[0].lex.string, yyval.interm.type))
            parseContext.recover();
    ;
    break;}
case 104:
#line 1313 "glslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-2].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();
            
        if (parseContext.nonInitConstErrorCheck(yyvsp[-2].lex.line, *yyvsp[-2].lex.string, yyvsp[-4].interm.type))
            parseContext.recover();

        yyval.interm = yyvsp[-4].interm;
        
        if (parseContext.arrayTypeErrorCheck(yyvsp[-1].lex.line, yyvsp[-4].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-1].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();
        else {
            yyvsp[-4].interm.type.setArray(true);
            TVariable* variable;
            if (parseContext.arrayErrorCheck(yyvsp[-1].lex.line, *yyvsp[-2].lex.string, yyvsp[-4].interm.type, variable))
                parseContext.recover();
        }
    ;
    break;}
case 105:
#line 1331 "glslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-5].interm.type))
            parseContext.recover();
            
        if (parseContext.nonInitConstErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-5].interm.type))
            parseContext.recover();
        
        yyval.interm = yyvsp[-5].interm;

        if (parseContext.arrayTypeErrorCheck(yyvsp[-2].lex.line, yyvsp[-5].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-2].lex.line, yyvsp[-5].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-2].lex.line, yyvsp[-1].interm.intermTypedNode, size))
                parseContext.recover();
            yyvsp[-5].interm.type.setArray(true, size);        
            TVariable* variable;
            if (parseContext.arrayErrorCheck(yyvsp[-2].lex.line, *yyvsp[-3].lex.string, yyvsp[-5].interm.type, variable))
                parseContext.recover();
        }
    ;
    break;}
case 106:
#line 1352 "glslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-4].lex.line, yyvsp[-6].interm.type))
            parseContext.recover();
            
        yyval.interm = yyvsp[-6].interm;
            
        TVariable* variable = 0;
        if (parseContext.arrayTypeErrorCheck(yyvsp[-3].lex.line, yyvsp[-6].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-6].interm.type))
            parseContext.recover();
        else {
			yyvsp[-6].interm.type.setArray(true, yyvsp[0].interm.intermTypedNode->getType().getArraySize());
            if (parseContext.arrayErrorCheck(yyvsp[-3].lex.line, *yyvsp[-4].lex.string, yyvsp[-6].interm.type, variable))
                parseContext.recover();
        }

        if (parseContext.extensionErrorCheck(yyval.interm.line, "GL_3DL_array_objects"))
            parseContext.recover();
        else {
            TIntermNode* intermNode;
            if (!parseContext.executeInitializer(yyvsp[-4].lex.line, *yyvsp[-4].lex.string, yyvsp[-6].interm.type, yyvsp[0].interm.intermTypedNode, intermNode, variable)) {
                //
                // build the intermediate representation
                //
                if (intermNode)
                    yyval.interm.intermAggregate = parseContext.intermediate.growAggregate(yyvsp[-6].interm.intermNode, intermNode, yyvsp[-1].lex.line);
                else
                    yyval.interm.intermAggregate = yyvsp[-6].interm.intermAggregate;
            } else {
                parseContext.recover();
                yyval.interm.intermAggregate = 0;
            }
        }
    ;
    break;}
case 107:
#line 1385 "glslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-5].lex.line, yyvsp[-7].interm.type))
            parseContext.recover();
            
        yyval.interm = yyvsp[-7].interm;
            
        TVariable* variable = 0;
        if (parseContext.arrayTypeErrorCheck(yyvsp[-4].lex.line, yyvsp[-7].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-4].lex.line, yyvsp[-7].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-4].lex.line, yyvsp[-3].interm.intermTypedNode, size))
                parseContext.recover();
            yyvsp[-7].interm.type.setArray(true, size);
            if (parseContext.arrayErrorCheck(yyvsp[-4].lex.line, *yyvsp[-5].lex.string, yyvsp[-7].interm.type, variable))
                parseContext.recover();
        }

        if (parseContext.extensionErrorCheck(yyval.interm.line, "GL_3DL_array_objects"))
            parseContext.recover();
        else {
            TIntermNode* intermNode;
            if (!parseContext.executeInitializer(yyvsp[-5].lex.line, *yyvsp[-5].lex.string, yyvsp[-7].interm.type, yyvsp[0].interm.intermTypedNode, intermNode, variable)) {
                //
                // build the intermediate representation
                //
                if (intermNode)
                    yyval.interm.intermAggregate = parseContext.intermediate.growAggregate(yyvsp[-7].interm.intermNode, intermNode, yyvsp[-1].lex.line);
                else
                    yyval.interm.intermAggregate = yyvsp[-7].interm.intermAggregate;
            } else {
                parseContext.recover();
                yyval.interm.intermAggregate = 0;
            }
        }
    ;
    break;}
case 108:
#line 1421 "glslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-2].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();
        
        yyval.interm = yyvsp[-4].interm;
        
        TIntermNode* intermNode;
        if (!parseContext.executeInitializer(yyvsp[-2].lex.line, *yyvsp[-2].lex.string, yyvsp[-4].interm.type, yyvsp[0].interm.intermTypedNode, intermNode)) {
            //
            // build the intermediate representation
            //
            if (intermNode)
                yyval.interm.intermAggregate = parseContext.intermediate.growAggregate(yyvsp[-4].interm.intermNode, intermNode, yyvsp[-1].lex.line);
            else
                yyval.interm.intermAggregate = yyvsp[-4].interm.intermAggregate;
        } else {
            parseContext.recover();
            yyval.interm.intermAggregate = 0;
        }
    ;
    break;}
case 109:
#line 1444 "glslang.y"
{
        yyval.interm.type = yyvsp[0].interm.type;
        yyval.interm.intermAggregate = 0;
    ;
    break;}
case 110:
#line 1448 "glslang.y"
{
        yyval.interm.intermAggregate = 0;
        yyval.interm.type = yyvsp[-1].interm.type;

        if (parseContext.structQualifierErrorCheck(yyvsp[0].lex.line, yyval.interm.type))
            parseContext.recover();
        
        if (parseContext.nonInitConstErrorCheck(yyvsp[0].lex.line, *yyvsp[0].lex.string, yyval.interm.type))
            parseContext.recover();

        if (parseContext.nonInitErrorCheck(yyvsp[0].lex.line, *yyvsp[0].lex.string, yyval.interm.type))
            parseContext.recover();
    ;
    break;}
case 111:
#line 1461 "glslang.y"
{
        yyval.interm.intermAggregate = 0;
        if (parseContext.structQualifierErrorCheck(yyvsp[-2].lex.line, yyvsp[-3].interm.type))
            parseContext.recover();

        if (parseContext.nonInitConstErrorCheck(yyvsp[-2].lex.line, *yyvsp[-2].lex.string, yyvsp[-3].interm.type))
            parseContext.recover();

        yyval.interm.type = yyvsp[-3].interm.type;

        if (parseContext.arrayTypeErrorCheck(yyvsp[-1].lex.line, yyvsp[-3].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-1].lex.line, yyvsp[-3].interm.type))
            parseContext.recover();
        else {
            yyvsp[-3].interm.type.setArray(true);        
            TVariable* variable;
            if (parseContext.arrayErrorCheck(yyvsp[-1].lex.line, *yyvsp[-2].lex.string, yyvsp[-3].interm.type, variable))
                parseContext.recover();
        }
    ;
    break;}
case 112:
#line 1480 "glslang.y"
{
        yyval.interm.intermAggregate = 0;
        if (parseContext.structQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();

        if (parseContext.nonInitConstErrorCheck(yyvsp[-3].lex.line, *yyvsp[-3].lex.string, yyvsp[-4].interm.type))
            parseContext.recover();
            
        yyval.interm.type = yyvsp[-4].interm.type;

        if (parseContext.arrayTypeErrorCheck(yyvsp[-2].lex.line, yyvsp[-4].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-2].lex.line, yyvsp[-4].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-2].lex.line, yyvsp[-1].interm.intermTypedNode, size))
                parseContext.recover();
            
            yyvsp[-4].interm.type.setArray(true, size);
            TVariable* variable;
            if (parseContext.arrayErrorCheck(yyvsp[-2].lex.line, *yyvsp[-3].lex.string, yyvsp[-4].interm.type, variable))
                parseContext.recover();
        }
    ;
    break;}
case 113:
#line 1503 "glslang.y"
{
        yyval.interm.intermAggregate = 0;

        if (parseContext.structQualifierErrorCheck(yyvsp[-4].lex.line, yyvsp[-5].interm.type))
            parseContext.recover();

        yyval.interm.type = yyvsp[-5].interm.type;

        TVariable* variable = 0;
        if (parseContext.arrayTypeErrorCheck(yyvsp[-3].lex.line, yyvsp[-5].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-3].lex.line, yyvsp[-5].interm.type))
            parseContext.recover();
        else {
            yyvsp[-5].interm.type.setArray(true, yyvsp[0].interm.intermTypedNode->getType().getArraySize());
            if (parseContext.arrayErrorCheck(yyvsp[-3].lex.line, *yyvsp[-4].lex.string, yyvsp[-5].interm.type, variable))
                parseContext.recover();
        }

        if (parseContext.extensionErrorCheck(yyval.interm.line, "GL_3DL_array_objects"))
            parseContext.recover();
        else {        
            TIntermNode* intermNode;
            if (!parseContext.executeInitializer(yyvsp[-4].lex.line, *yyvsp[-4].lex.string, yyvsp[-5].interm.type, yyvsp[0].interm.intermTypedNode, intermNode, variable)) {
                //
                // Build intermediate representation
                //
                if (intermNode)
                    yyval.interm.intermAggregate = parseContext.intermediate.makeAggregate(intermNode, yyvsp[-1].lex.line);
                else
                    yyval.interm.intermAggregate = 0;
            } else {
                parseContext.recover();
                yyval.interm.intermAggregate = 0;
            }
        }
    ;
    break;}
case 114:
#line 1538 "glslang.y"
{
        yyval.interm.intermAggregate = 0;

        if (parseContext.structQualifierErrorCheck(yyvsp[-5].lex.line, yyvsp[-6].interm.type))
            parseContext.recover();

        yyval.interm.type = yyvsp[-6].interm.type;

        TVariable* variable = 0;
        if (parseContext.arrayTypeErrorCheck(yyvsp[-4].lex.line, yyvsp[-6].interm.type) || parseContext.arrayQualifierErrorCheck(yyvsp[-4].lex.line, yyvsp[-6].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-4].lex.line, yyvsp[-3].interm.intermTypedNode, size))
                parseContext.recover();
            
            yyvsp[-6].interm.type.setArray(true, size);
            if (parseContext.arrayErrorCheck(yyvsp[-4].lex.line, *yyvsp[-5].lex.string, yyvsp[-6].interm.type, variable))
                parseContext.recover();
        }

        if (parseContext.extensionErrorCheck(yyval.interm.line, "GL_3DL_array_objects"))
            parseContext.recover();
        else {        
            TIntermNode* intermNode;
            if (!parseContext.executeInitializer(yyvsp[-5].lex.line, *yyvsp[-5].lex.string, yyvsp[-6].interm.type, yyvsp[0].interm.intermTypedNode, intermNode, variable)) {
                //
                // Build intermediate representation
                //
                if (intermNode)
                    yyval.interm.intermAggregate = parseContext.intermediate.makeAggregate(intermNode, yyvsp[-1].lex.line);
                else
                    yyval.interm.intermAggregate = 0;
            } else {
                parseContext.recover();
                yyval.interm.intermAggregate = 0;
            }
        }        
    ;
    break;}
case 115:
#line 1577 "glslang.y"
{
        if (parseContext.structQualifierErrorCheck(yyvsp[-2].lex.line, yyvsp[-3].interm.type))
            parseContext.recover();

        yyval.interm.type = yyvsp[-3].interm.type;

        TIntermNode* intermNode;
        if (!parseContext.executeInitializer(yyvsp[-2].lex.line, *yyvsp[-2].lex.string, yyvsp[-3].interm.type, yyvsp[0].interm.intermTypedNode, intermNode)) {
            //
            // Build intermediate representation
            //
            if (intermNode)
                yyval.interm.intermAggregate = parseContext.intermediate.makeAggregate(intermNode, yyvsp[-1].lex.line);
            else
                yyval.interm.intermAggregate = 0;
        } else {
            parseContext.recover();
            yyval.interm.intermAggregate = 0;
        }
    ;
    break;}
case 116:
#line 1668 "glslang.y"
{
        yyval.interm.type = yyvsp[0].interm.type;
                
        if (yyvsp[0].interm.type.array) {
            if (parseContext.extensionErrorCheck(yyvsp[0].interm.type.line, "GL_3DL_array_objects")) {
                parseContext.recover();
                yyvsp[0].interm.type.setArray(false);
            }
        }
    ;
    break;}
case 117:
#line 1678 "glslang.y"
{        
        if (yyvsp[0].interm.type.array && parseContext.extensionErrorCheck(yyvsp[0].interm.type.line, "GL_3DL_array_objects")) {
            parseContext.recover();
            yyvsp[0].interm.type.setArray(false);
        }
        if (yyvsp[0].interm.type.array && parseContext.arrayQualifierErrorCheck(yyvsp[0].interm.type.line, yyvsp[-1].interm.type)) {
            parseContext.recover();
            yyvsp[0].interm.type.setArray(false);
        }
        
        if (yyvsp[-1].interm.type.qualifier == EvqAttribute &&
            (yyvsp[0].interm.type.type == EbtBool || yyvsp[0].interm.type.type == EbtInt)) {
            parseContext.error(yyvsp[0].interm.type.line, "cannot be bool or int", getQualifierString(yyvsp[-1].interm.type.qualifier), "");
            parseContext.recover();
        }
        if ((yyvsp[-1].interm.type.qualifier == EvqVaryingIn || yyvsp[-1].interm.type.qualifier == EvqVaryingOut) &&
            (yyvsp[0].interm.type.type == EbtBool || yyvsp[0].interm.type.type == EbtInt)) {
            parseContext.error(yyvsp[0].interm.type.line, "cannot be bool or int", getQualifierString(yyvsp[-1].interm.type.qualifier), "");
            parseContext.recover();
        }
        yyval.interm.type = yyvsp[0].interm.type; 
        yyval.interm.type.qualifier = yyvsp[-1].interm.type.qualifier;
    ;
    break;}
case 118:
#line 1704 "glslang.y"
{
        yyval.interm.type.setBasic(EbtVoid, EvqConst, yyvsp[0].lex.line);
    ;
    break;}
case 119:
#line 1707 "glslang.y"
{ 
        VERTEX_ONLY("attribute", yyvsp[0].lex.line);
        if (parseContext.globalErrorCheck(yyvsp[0].lex.line, parseContext.symbolTable.atGlobalLevel(), "attribute"))
            parseContext.recover();
        yyval.interm.type.setBasic(EbtVoid, EvqAttribute, yyvsp[0].lex.line);
    ;
    break;}
case 120:
#line 1713 "glslang.y"
{
        if (parseContext.globalErrorCheck(yyvsp[0].lex.line, parseContext.symbolTable.atGlobalLevel(), "varying"))
            parseContext.recover();
        if (parseContext.language == EShLangVertex)
            yyval.interm.type.setBasic(EbtVoid, EvqVaryingOut, yyvsp[0].lex.line);
        else
            yyval.interm.type.setBasic(EbtVoid, EvqVaryingIn, yyvsp[0].lex.line);
    ;
    break;}
case 121:
#line 1721 "glslang.y"
{
        if (parseContext.globalErrorCheck(yyvsp[0].lex.line, parseContext.symbolTable.atGlobalLevel(), "uniform"))
            parseContext.recover();
        yyval.interm.type.setBasic(EbtVoid, EvqUniform, yyvsp[0].lex.line);
    ;
    break;}
case 122:
#line 1729 "glslang.y"
{
        yyval.interm.type = yyvsp[0].interm.type;
    ;
    break;}
case 123:
#line 1732 "glslang.y"
{
        yyval.interm.type = yyvsp[-3].interm.type;
        
        if (parseContext.arrayTypeErrorCheck(yyvsp[-2].lex.line, yyvsp[-3].interm.type))
            parseContext.recover();
        else {
            int size;
            if (parseContext.arraySizeErrorCheck(yyvsp[-2].lex.line, yyvsp[-1].interm.intermTypedNode, size))
                parseContext.recover();
            yyval.interm.type.setArray(true, size);
        }
    ;
    break;}
case 124:
#line 1747 "glslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtVoid, qual, yyvsp[0].lex.line); 
    ;
    break;}
case 125:
#line 1751 "glslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[0].lex.line);
    ;
    break;}
case 126:
#line 1755 "glslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtInt, qual, yyvsp[0].lex.line);
    ;
    break;}
case 127:
#line 1759 "glslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtBool, qual, yyvsp[0].lex.line);
    ;
    break;}
case 128:
#line 1768 "glslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(2);
    ;
    break;}
case 129:
#line 1773 "glslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(3);
    ;
    break;}
case 130:
#line 1778 "glslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(4);
    ;
    break;}
case 131:
#line 1783 "glslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtBool, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(2);
    ;
    break;}
case 132:
#line 1788 "glslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtBool, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(3);
    ;
    break;}
case 133:
#line 1793 "glslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtBool, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(4);
    ;
    break;}
case 134:
#line 1798 "glslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtInt, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(2);
    ;
    break;}
case 135:
#line 1803 "glslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtInt, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(3);
    ;
    break;}
case 136:
#line 1808 "glslang.y"
{
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtInt, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(4);
    ;
    break;}
case 137:
#line 1813 "glslang.y"
{
        FRAG_VERT_ONLY("mat2", yyvsp[0].lex.line); 
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(2, true);
    ;
    break;}
case 138:
#line 1819 "glslang.y"
{ 
        FRAG_VERT_ONLY("mat3", yyvsp[0].lex.line); 
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(3, true);
    ;
    break;}
case 139:
#line 1825 "glslang.y"
{ 
        FRAG_VERT_ONLY("mat4", yyvsp[0].lex.line);
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtFloat, qual, yyvsp[0].lex.line);
        yyval.interm.type.setAggregate(4, true);
    ;
    break;}
case 140:
#line 1831 "glslang.y"
{
        FRAG_VERT_ONLY("sampler1D", yyvsp[0].lex.line);
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtSampler1D, qual, yyvsp[0].lex.line);
    ;
    break;}
case 141:
#line 1836 "glslang.y"
{
        FRAG_VERT_ONLY("sampler2D", yyvsp[0].lex.line);
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtSampler2D, qual, yyvsp[0].lex.line);
    ;
    break;}
case 142:
#line 1841 "glslang.y"
{
        FRAG_VERT_ONLY("sampler3D", yyvsp[0].lex.line);
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtSampler3D, qual, yyvsp[0].lex.line);
    ;
    break;}
case 143:
#line 1846 "glslang.y"
{
        FRAG_VERT_ONLY("samplerCube", yyvsp[0].lex.line);
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtSamplerCube, qual, yyvsp[0].lex.line);
    ;
    break;}
case 144:
#line 1851 "glslang.y"
{
        FRAG_VERT_ONLY("sampler1DShadow", yyvsp[0].lex.line);
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtSampler1DShadow, qual, yyvsp[0].lex.line);
    ;
    break;}
case 145:
#line 1856 "glslang.y"
{
        FRAG_VERT_ONLY("sampler2DShadow", yyvsp[0].lex.line);
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtSampler2DShadow, qual, yyvsp[0].lex.line);
    ;
    break;}
case 146:
#line 1861 "glslang.y"
{
        // ARB_texture_rectangle

        FRAG_VERT_ONLY("samplerRectARB", yyvsp[0].lex.line);
        if (parseContext.extensionErrorCheck(yyvsp[0].lex.line, "GL_ARB_texture_rectangle"))
            parseContext.recover();
        
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtSamplerRect, qual, yyvsp[0].lex.line);
    ;
    break;}
case 147:
#line 1871 "glslang.y"
{
        // ARB_texture_rectangle

        FRAG_VERT_ONLY("samplerRectShadowARB", yyvsp[0].lex.line);
        if (parseContext.extensionErrorCheck(yyvsp[0].lex.line, "GL_ARB_texture_rectangle"))
            parseContext.recover();

        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtSamplerRectShadow, qual, yyvsp[0].lex.line);
    ;
    break;}
case 148:
#line 1881 "glslang.y"
{
        FRAG_VERT_ONLY("struct", yyvsp[0].interm.type.line);
        yyval.interm.type = yyvsp[0].interm.type;
        yyval.interm.type.qualifier = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
    ;
    break;}
case 149:
#line 1886 "glslang.y"
{     
        //
        // This is for user defined type names.  The lexical phase looked up the 
        // type.
        //
        TType& structure = static_cast<TVariable*>(yyvsp[0].lex.symbol)->getType();
        TQualifier qual = parseContext.symbolTable.atGlobalLevel() ? EvqGlobal : EvqTemporary;
        yyval.interm.type.setBasic(EbtStruct, qual, yyvsp[0].lex.line);
        yyval.interm.type.userDef = &structure;
    ;
    break;}
case 150:
#line 1899 "glslang.y"
{
        TType* structure = new TType(yyvsp[-1].interm.typeList, *yyvsp[-3].lex.string);
        TVariable* userTypeDef = new TVariable(yyvsp[-3].lex.string, *structure, true);
        if (! parseContext.symbolTable.insert(*userTypeDef)) {
            parseContext.error(yyvsp[-3].lex.line, "redefinition", yyvsp[-3].lex.string->c_str(), "struct");
            parseContext.recover();
        }
        yyval.interm.type.setBasic(EbtStruct, EvqTemporary, yyvsp[-4].lex.line);
        yyval.interm.type.userDef = structure;
    ;
    break;}
case 151:
#line 1909 "glslang.y"
{
        TType* structure = new TType(yyvsp[-1].interm.typeList, TString(""));
        yyval.interm.type.setBasic(EbtStruct, EvqTemporary, yyvsp[-3].lex.line);
        yyval.interm.type.userDef = structure;
    ;
    break;}
case 152:
#line 1917 "glslang.y"
{
        yyval.interm.typeList = yyvsp[0].interm.typeList;
    ;
    break;}
case 153:
#line 1920 "glslang.y"
{
        yyval.interm.typeList = yyvsp[-1].interm.typeList;
        for (unsigned int i = 0; i < yyvsp[0].interm.typeList->size(); ++i) {
            for (unsigned int j = 0; j < yyval.interm.typeList->size(); ++j) {
                if ((*yyval.interm.typeList)[j].type->getFieldName() == (*yyvsp[0].interm.typeList)[i].type->getFieldName()) {
                    parseContext.error((*yyvsp[0].interm.typeList)[i].line, "duplicate field name in structure:", "struct", (*yyvsp[0].interm.typeList)[i].type->getFieldName().c_str());
                    parseContext.recover();
                }
            }
            yyval.interm.typeList->push_back((*yyvsp[0].interm.typeList)[i]);
        }
    ;
    break;}
case 154:
#line 1935 "glslang.y"
{
        yyval.interm.typeList = yyvsp[-1].interm.typeList;
        
        if (parseContext.voidErrorCheck(yyvsp[-2].interm.type.line, (*yyvsp[-1].interm.typeList)[0].type->getFieldName(), yyvsp[-2].interm.type)) {
            parseContext.recover();
        }
        for (unsigned int i = 0; i < yyval.interm.typeList->size(); ++i) {
            //
            // Careful not to replace already know aspects of type, like array-ness
            //
            (*yyval.interm.typeList)[i].type->setType(yyvsp[-2].interm.type.type, yyvsp[-2].interm.type.size, yyvsp[-2].interm.type.matrix, yyvsp[-2].interm.type.userDef);

            // don't allow arrays of arrays
            if ((*yyval.interm.typeList)[i].type->isArray()) {
                if (parseContext.arrayTypeErrorCheck(yyvsp[-2].interm.type.line, yyvsp[-2].interm.type))
                    parseContext.recover();
            }
            if (yyvsp[-2].interm.type.array)
                (*yyval.interm.typeList)[i].type->setArraySize(yyvsp[-2].interm.type.arraySize);
            if (yyvsp[-2].interm.type.userDef)
                (*yyval.interm.typeList)[i].type->setTypeName(yyvsp[-2].interm.type.userDef->getTypeName());
        }
    ;
    break;}
case 155:
#line 1961 "glslang.y"
{
        yyval.interm.typeList = NewPoolTTypeList();
        yyval.interm.typeList->push_back(yyvsp[0].interm.typeLine);
    ;
    break;}
case 156:
#line 1965 "glslang.y"
{
        yyval.interm.typeList->push_back(yyvsp[0].interm.typeLine);
    ;
    break;}
case 157:
#line 1971 "glslang.y"
{
        yyval.interm.typeLine.type = new TType(EbtVoid);
        yyval.interm.typeLine.line = yyvsp[0].lex.line;
        yyval.interm.typeLine.type->setFieldName(*yyvsp[0].lex.string);
    ;
    break;}
case 158:
#line 1976 "glslang.y"
{
        yyval.interm.typeLine.type = new TType(EbtVoid);
        yyval.interm.typeLine.line = yyvsp[-3].lex.line;
        yyval.interm.typeLine.type->setFieldName(*yyvsp[-3].lex.string);
        
        int size;
        if (parseContext.arraySizeErrorCheck(yyvsp[-2].lex.line, yyvsp[-1].interm.intermTypedNode, size))
            parseContext.recover();
        yyval.interm.typeLine.type->setArraySize(size);
    ;
    break;}
case 159:
#line 1989 "glslang.y"
{ yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; ;
    break;}
case 160:
#line 1993 "glslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 161:
#line 1997 "glslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermAggregate; ;
    break;}
case 162:
#line 1998 "glslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 163:
#line 2004 "glslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 164:
#line 2005 "glslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 165:
#line 2006 "glslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 166:
#line 2007 "glslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 167:
#line 2008 "glslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 168:
#line 2012 "glslang.y"
{ yyval.interm.intermAggregate = 0; ;
    break;}
case 169:
#line 2013 "glslang.y"
{ parseContext.symbolTable.push(); ;
    break;}
case 170:
#line 2013 "glslang.y"
{ parseContext.symbolTable.pop(); ;
    break;}
case 171:
#line 2013 "glslang.y"
{
        if (yyvsp[-2].interm.intermAggregate != 0)            
            yyvsp[-2].interm.intermAggregate->setOperator(EOpSequence); 
        yyval.interm.intermAggregate = yyvsp[-2].interm.intermAggregate;
    ;
    break;}
case 172:
#line 2021 "glslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 173:
#line 2022 "glslang.y"
{ yyval.interm.intermNode = yyvsp[0].interm.intermNode; ;
    break;}
case 174:
#line 2027 "glslang.y"
{ 
        yyval.interm.intermNode = 0; 
    ;
    break;}
case 175:
#line 2030 "glslang.y"
{ 
        if (yyvsp[-1].interm.intermAggregate)
            yyvsp[-1].interm.intermAggregate->setOperator(EOpSequence); 
        yyval.interm.intermNode = yyvsp[-1].interm.intermAggregate; 
    ;
    break;}
case 176:
#line 2038 "glslang.y"
{
        yyval.interm.intermAggregate = parseContext.intermediate.makeAggregate(yyvsp[0].interm.intermNode, 0); 
    ;
    break;}
case 177:
#line 2041 "glslang.y"
{ 
        yyval.interm.intermAggregate = parseContext.intermediate.growAggregate(yyvsp[-1].interm.intermAggregate, yyvsp[0].interm.intermNode, 0);
    ;
    break;}
case 178:
#line 2047 "glslang.y"
{ yyval.interm.intermNode = 0; ;
    break;}
case 179:
#line 2048 "glslang.y"
{ yyval.interm.intermNode = static_cast<TIntermNode*>(yyvsp[-1].interm.intermTypedNode); ;
    break;}
case 180:
#line 2052 "glslang.y"
{ 
        if (parseContext.boolErrorCheck(yyvsp[-4].lex.line, yyvsp[-2].interm.intermTypedNode))
            parseContext.recover();
        yyval.interm.intermNode = parseContext.intermediate.addSelection(yyvsp[-2].interm.intermTypedNode, yyvsp[0].interm.nodePair, yyvsp[-4].lex.line);
    ;
    break;}
case 181:
#line 2060 "glslang.y"
{
        yyval.interm.nodePair.node1 = yyvsp[-2].interm.intermNode;
        yyval.interm.nodePair.node2 = yyvsp[0].interm.intermNode;
    ;
    break;}
case 182:
#line 2064 "glslang.y"
{ 
        yyval.interm.nodePair.node1 = yyvsp[0].interm.intermNode;
        yyval.interm.nodePair.node2 = 0;
    ;
    break;}
case 183:
#line 2074 "glslang.y"
{
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        if (parseContext.boolErrorCheck(yyvsp[0].interm.intermTypedNode->getLine(), yyvsp[0].interm.intermTypedNode))
            parseContext.recover();          
    ;
    break;}
case 184:
#line 2079 "glslang.y"
{
        TIntermNode* intermNode;
        if (parseContext.structQualifierErrorCheck(yyvsp[-2].lex.line, yyvsp[-3].interm.type))
            parseContext.recover();
        if (parseContext.boolErrorCheck(yyvsp[-2].lex.line, yyvsp[-3].interm.type))
            parseContext.recover();
        
        if (!parseContext.executeInitializer(yyvsp[-2].lex.line, *yyvsp[-2].lex.string, yyvsp[-3].interm.type, yyvsp[0].interm.intermTypedNode, intermNode))
            yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode;
        else {
            parseContext.recover();
            yyval.interm.intermTypedNode = 0;
        }
    ;
    break;}
case 185:
#line 2096 "glslang.y"
{ parseContext.symbolTable.push(); ++parseContext.loopNestingLevel; ;
    break;}
case 186:
#line 2096 "glslang.y"
{ 
        parseContext.symbolTable.pop();
        yyval.interm.intermNode = parseContext.intermediate.addLoop(yyvsp[0].interm.intermNode, yyvsp[-2].interm.intermTypedNode, 0, true, yyvsp[-5].lex.line);
        --parseContext.loopNestingLevel;
    ;
    break;}
case 187:
#line 2101 "glslang.y"
{ ++parseContext.loopNestingLevel; ;
    break;}
case 188:
#line 2101 "glslang.y"
{
        if (parseContext.boolErrorCheck(yyvsp[0].lex.line, yyvsp[-2].interm.intermTypedNode))
            parseContext.recover();
                    
        yyval.interm.intermNode = parseContext.intermediate.addLoop(yyvsp[-5].interm.intermNode, yyvsp[-2].interm.intermTypedNode, 0, false, yyvsp[-4].lex.line);
        --parseContext.loopNestingLevel;
    ;
    break;}
case 189:
#line 2108 "glslang.y"
{ parseContext.symbolTable.push(); ++parseContext.loopNestingLevel; ;
    break;}
case 190:
#line 2108 "glslang.y"
{
        parseContext.symbolTable.pop();
        yyval.interm.intermNode = parseContext.intermediate.makeAggregate(yyvsp[-3].interm.intermNode, yyvsp[-5].lex.line);
        yyval.interm.intermNode = parseContext.intermediate.growAggregate(
                yyval.interm.intermNode,
                parseContext.intermediate.addLoop(yyvsp[0].interm.intermNode, reinterpret_cast<TIntermTyped*>(yyvsp[-2].interm.nodePair.node1), reinterpret_cast<TIntermTyped*>(yyvsp[-2].interm.nodePair.node2), true, yyvsp[-6].lex.line),
                yyvsp[-6].lex.line);
        yyval.interm.intermNode->getAsAggregate()->setOperator(EOpSequence);
        --parseContext.loopNestingLevel;
    ;
    break;}
case 191:
#line 2121 "glslang.y"
{
        yyval.interm.intermNode = yyvsp[0].interm.intermNode; 
    ;
    break;}
case 192:
#line 2124 "glslang.y"
{
        yyval.interm.intermNode = yyvsp[0].interm.intermNode;
    ;
    break;}
case 193:
#line 2130 "glslang.y"
{ 
        yyval.interm.intermTypedNode = yyvsp[0].interm.intermTypedNode; 
    ;
    break;}
case 194:
#line 2133 "glslang.y"
{ 
        yyval.interm.intermTypedNode = 0; 
    ;
    break;}
case 195:
#line 2139 "glslang.y"
{ 
        yyval.interm.nodePair.node1 = yyvsp[-1].interm.intermTypedNode;
        yyval.interm.nodePair.node2 = 0;
    ;
    break;}
case 196:
#line 2143 "glslang.y"
{
        yyval.interm.nodePair.node1 = yyvsp[-2].interm.intermTypedNode;
        yyval.interm.nodePair.node2 = yyvsp[0].interm.intermTypedNode;
    ;
    break;}
case 197:
#line 2150 "glslang.y"
{
        if (parseContext.loopNestingLevel <= 0) {
            parseContext.error(yyvsp[-1].lex.line, "continue statement only allowed in loops", "", "");
            parseContext.recover();
        }        
        yyval.interm.intermNode = parseContext.intermediate.addBranch(EOpContinue, yyvsp[-1].lex.line);
    ;
    break;}
case 198:
#line 2157 "glslang.y"
{
        if (parseContext.loopNestingLevel <= 0) {
            parseContext.error(yyvsp[-1].lex.line, "break statement only allowed in loops", "", "");
            parseContext.recover();
        }        
        yyval.interm.intermNode = parseContext.intermediate.addBranch(EOpBreak, yyvsp[-1].lex.line);
    ;
    break;}
case 199:
#line 2164 "glslang.y"
{
        yyval.interm.intermNode = parseContext.intermediate.addBranch(EOpReturn, yyvsp[-1].lex.line);
        if (parseContext.currentFunctionType->getBasicType() != EbtVoid) {
            parseContext.error(yyvsp[-1].lex.line, "non-void function must return a value", "return", "");
            parseContext.recover();
        }
    ;
    break;}
case 200:
#line 2171 "glslang.y"
{        
        yyval.interm.intermNode = parseContext.intermediate.addBranch(EOpReturn, yyvsp[-1].interm.intermTypedNode, yyvsp[-2].lex.line);
        parseContext.functionReturnsValue = true;
        if (parseContext.currentFunctionType->getBasicType() == EbtVoid) {
            parseContext.error(yyvsp[-2].lex.line, "void function cannot return a value", "return", "");
            parseContext.recover();
        } else if (*(parseContext.currentFunctionType) != yyvsp[-1].interm.intermTypedNode->getType()) {
            parseContext.error(yyvsp[-2].lex.line, "function return is not matching type:", "return", "");
            parseContext.recover();
        }
    ;
    break;}
case 201:
#line 2182 "glslang.y"
{
        FRAG_ONLY("discard", yyvsp[-1].lex.line);
        yyval.interm.intermNode = parseContext.intermediate.addBranch(EOpKill, yyvsp[-1].lex.line);
    ;
    break;}
case 202:
#line 2191 "glslang.y"
{ 
        yyval.interm.intermNode = yyvsp[0].interm.intermNode; 
        parseContext.treeRoot = yyval.interm.intermNode; 
    ;
    break;}
case 203:
#line 2195 "glslang.y"
{
        yyval.interm.intermNode = parseContext.intermediate.growAggregate(yyvsp[-1].interm.intermNode, yyvsp[0].interm.intermNode, 0);
        parseContext.treeRoot = yyval.interm.intermNode;
    ;
    break;}
case 204:
#line 2202 "glslang.y"
{ 
        yyval.interm.intermNode = yyvsp[0].interm.intermNode; 
    ;
    break;}
case 205:
#line 2205 "glslang.y"
{ 
        yyval.interm.intermNode = yyvsp[0].interm.intermNode; 
    ;
    break;}
case 206:
#line 2211 "glslang.y"
{
        TFunction& function = *(yyvsp[0].interm.function);
        TFunction* prevDec = static_cast<TFunction*>(parseContext.symbolTable.find(function.getMangledName()));
        //
        // Note:  'prevDec' could be 'function' if this is the first time we've seen function
        // as it would have just been put in the symbol table.  Otherwise, we're looking up
        // an earlier occurance.
        //
        if (prevDec->isDefined()) {
            //
            // Then this function already has a body.
            //
            parseContext.error(yyvsp[0].interm.line, "function already has a body", function.getName().c_str(), "");
            parseContext.recover();
        }
        prevDec->setDefined();
        
        //
        // Raise error message if main function takes any parameters or return anything other than void
        //
        if (function.getName() == "main") {
            if (function.getParamCount() > 0) {
                parseContext.error(yyvsp[0].interm.line, "function cannot take any parameter(s)", function.getName().c_str(), "");
                parseContext.recover();
            }
            if (function.getReturnType().getBasicType() != EbtVoid) {
                parseContext.error(yyvsp[0].interm.line, "", function.getReturnType().getBasicString(), "main function cannot return a value");
                parseContext.recover();
            }            
        }
   
        //
        // New symbol table scope for body of function plus its arguments
        //
        parseContext.symbolTable.push();
        
        //
        // Remember the return type for later checking for RETURN statements.
        //
        parseContext.currentFunctionType = &(prevDec->getReturnType());
        parseContext.functionReturnsValue = false;
        
        // 
        // Insert parameters into the symbol table.
        // If the parameter has no name, it's not an error, just don't insert it 
        // (could be used for unused args).
        //
        // Also, accumulate the list of parameters into the HIL, so lower level code
        // knows where to find parameters.
        //
        TIntermAggregate* paramNodes = new TIntermAggregate;
        for (int i = 0; i < function.getParamCount(); i++) {
            TParameter& param = function[i];
            if (param.name != 0) {
                TVariable *variable = new TVariable(param.name, *param.type);
                // 
                // Insert the parameters with name in the symbol table.
                //
                if (! parseContext.symbolTable.insert(*variable)) {
                    parseContext.error(yyvsp[0].interm.line, "redefinition", variable->getName().c_str(), "");
                    parseContext.recover();
                    delete variable;
                }
                //
                // Transfer ownership of name pointer to symbol table.
                //
                param.name = 0;
                
                //
                // Add the parameter to the HIL
                //                
                paramNodes = parseContext.intermediate.growAggregate(
                                               paramNodes, 
                                               parseContext.intermediate.addSymbol(variable->getUniqueId(),
                                                                       variable->getName(),
                                                                       variable->getType(), yyvsp[0].interm.line), 
                                               yyvsp[0].interm.line);
            } else {
                paramNodes = parseContext.intermediate.growAggregate(paramNodes, parseContext.intermediate.addSymbol(0, "", *param.type, yyvsp[0].interm.line), yyvsp[0].interm.line);
            }
        }
        parseContext.intermediate.setAggregateOperator(paramNodes, EOpParameters, yyvsp[0].interm.line);
        yyvsp[0].interm.intermAggregate = paramNodes;
        parseContext.loopNestingLevel = 0;
    ;
    break;}
case 207:
#line 2296 "glslang.y"
{
        //?? Check that all paths return a value if return type != void ?
        //   May be best done as post process phase on intermediate code
        if (parseContext.currentFunctionType->getBasicType() != EbtVoid && ! parseContext.functionReturnsValue) {
            parseContext.error(yyvsp[-2].interm.line, "function does not return a value:", "", yyvsp[-2].interm.function->getName().c_str());
            parseContext.recover();
        }
        parseContext.symbolTable.pop();
        yyval.interm.intermNode = parseContext.intermediate.growAggregate(yyvsp[-2].interm.intermAggregate, yyvsp[0].interm.intermNode, 0);
        parseContext.intermediate.setAggregateOperator(yyval.interm.intermNode, EOpFunction, yyvsp[-2].interm.line);
        yyval.interm.intermNode->getAsAggregate()->setName(yyvsp[-2].interm.function->getMangledName().c_str());
        yyval.interm.intermNode->getAsAggregate()->setType(yyvsp[-2].interm.function->getReturnType());
        
        // store the pragma information for debug and optimize and other vendor specific 
        // information. This information can be queried from the parse tree
        yyval.interm.intermNode->getAsAggregate()->setOptimize(parseContext.contextPragma.optimize);
        yyval.interm.intermNode->getAsAggregate()->setDebug(parseContext.contextPragma.debug);
        yyval.interm.intermNode->getAsAggregate()->addToPragmaTable(parseContext.contextPragma.pragmaTable);
    ;
    break;}
}
   /* the action file gets copied in in place of this dollarsign */
  yyvsp -= yylen;
  yyssp -= yylen;
#ifdef YYLSP_NEEDED
  yylsp -= yylen;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

  *++yyvsp = yyval;

#ifdef YYLSP_NEEDED
  yylsp++;
  if (yylen == 0)
    {
      yylsp->first_line = yylloc.first_line;
      yylsp->first_column = yylloc.first_column;
      yylsp->last_line = (yylsp-1)->last_line;
      yylsp->last_column = (yylsp-1)->last_column;
      yylsp->text = 0;
    }
  else
    {
      yylsp->last_line = (yylsp+yylen-1)->last_line;
      yylsp->last_column = (yylsp+yylen-1)->last_column;
    }
#endif

  /* Now "shift" the result of the reduction.
     Determine what state that goes to,
     based on the state we popped back to
     and the rule number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTBASE];

  goto yynewstate;

yyerrlab:   /* here on detecting error */

  if (! yyerrstatus)
    /* If not already recovering from an error, report this error.  */
    {
      ++yynerrs;

#ifdef YYERROR_VERBOSE
      yyn = yypact[yystate];

      if (yyn > YYFLAG && yyn < YYLAST)
	{
	  int size = 0;
	  char *msg;
	  int x, count;

	  count = 0;
	  /* Start X at -yyn if nec to avoid negative indexes in yycheck.  */
	  for (x = (yyn < 0 ? -yyn : 0);
	       x < (sizeof(yytname) / sizeof(char *)); x++)
	    if (yycheck[x + yyn] == x)
	      size += strlen(yytname[x]) + 15, count++;
	  msg = (char *) malloc(size + 15);
	  if (msg != 0)
	    {
	      strcpy(msg, "parse error");

	      if (count < 5)
		{
		  count = 0;
		  for (x = (yyn < 0 ? -yyn : 0);
		       x < (sizeof(yytname) / sizeof(char *)); x++)
		    if (yycheck[x + yyn] == x)
		      {
			strcat(msg, count == 0 ? ", expecting `" : " or `");
			strcat(msg, yytname[x]);
			strcat(msg, "'");
			count++;
		      }
		}
	      yyerror(msg);
	      free(msg);
	    }
	  else
	    yyerror ("parse error; also virtual memory exceeded");
	}
      else
#endif /* YYERROR_VERBOSE */
	yyerror("parse error");
    }

  goto yyerrlab1;
yyerrlab1:   /* here on error raised explicitly by an action */

  if (yyerrstatus == 3)
    {
      /* if just tried and failed to reuse lookahead token after an error, discard it.  */

      /* return failure if at end of input */
      if (yychar == YYEOF)
	YYABORT;

#if YYDEBUG != 0
      if (yydebug)
	fprintf(stderr, "Discarding token %d (%s).\n", yychar, yytname[yychar1]);
#endif

      yychar = YYEMPTY;
    }

  /* Else will try to reuse lookahead token
     after shifting the error token.  */

  yyerrstatus = 3;		/* Each real token shifted decrements this */

  goto yyerrhandle;

yyerrdefault:  /* current state does not do anything special for the error token. */

#if 0
  /* This is wrong; only states that explicitly want error tokens
     should shift them.  */
  yyn = yydefact[yystate];  /* If its default is to accept any token, ok.  Otherwise pop it.*/
  if (yyn) goto yydefault;
#endif

yyerrpop:   /* pop the current state because it cannot handle the error token */

  if (yyssp == yyss) YYABORT;
  yyvsp--;
  yystate = *--yyssp;
#ifdef YYLSP_NEEDED
  yylsp--;
#endif

#if YYDEBUG != 0
  if (yydebug)
    {
      short *ssp1 = yyss - 1;
      fprintf (stderr, "Error: state stack now");
      while (ssp1 != yyssp)
	fprintf (stderr, " %d", *++ssp1);
      fprintf (stderr, "\n");
    }
#endif

yyerrhandle:

  yyn = yypact[yystate];
  if (yyn == YYFLAG)
    goto yyerrdefault;

  yyn += YYTERROR;
  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
    goto yyerrdefault;

  yyn = yytable[yyn];
  if (yyn < 0)
    {
      if (yyn == YYFLAG)
	goto yyerrpop;
      yyn = -yyn;
      goto yyreduce;
    }
  else if (yyn == 0)
    goto yyerrpop;

  if (yyn == YYFINAL)
    YYACCEPT;

#if YYDEBUG != 0
  if (yydebug)
    fprintf(stderr, "Shifting error token, ");
#endif

  *++yyvsp = yylval;
#ifdef YYLSP_NEEDED
  *++yylsp = yylloc;
#endif

  yystate = yyn;
  goto yynewstate;
}
#line 2317 "glslang.y"

